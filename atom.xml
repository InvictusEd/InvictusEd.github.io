<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Makuvi湫</title>
  
  <subtitle>Makuvi湫</subtitle>
  <link href="http://invictusqiu.com/atom.xml" rel="self"/>
  
  <link href="http://invictusqiu.com/"/>
  <updated>2024-09-21T08:19:24.000Z</updated>
  <id>http://invictusqiu.com/</id>
  
  <author>
    <name>InvictusEd</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>毕业设计——在线教育平台</title>
    <link href="http://invictusqiu.com/2024/05/27/OnlineEducation/"/>
    <id>http://invictusqiu.com/2024/05/27/OnlineEducation/</id>
    <published>2024-05-27T11:04:00.000Z</published>
    <updated>2024-09-21T08:19:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>由于在开发该系统时，并未有书写开发文档的经验，而仅仅是记录了每一天的开发日志，但开发日志多达21篇，因此把所有开发日志放在博客当中是影响读者观感的，因此本篇文章仅仅是作为总结，如果有具体需要，请联系我，或者访问我的GitHub仓库或百度云盘。</p><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>在线教育平台采用B2C模式，Spring Cloud搭建整个微服务架构，后台采用Spring Boot+MySQL+MyBatis-Plus+Redis，并且结合Vue前端框架，采用Nuxt服务端渲染技术来优化前端页面，运用阿里云视频点播技术。在管理系统的后台中，运用Spring Security进行用户认证和授权，以确保对不同用户权限的细致划分。在用户的登录系统方面，则采纳了手机验证码注册和登录方式，并运用JWT生成Token以实现便捷的单点登录。此外，用户通过微信支付来进行课程购买。</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul><li>Spring Boot</li><li>Spring Cloud</li><li>MySQL</li><li>MyBatis-Plus</li><li>Redis</li><li>Spring Security</li><li>EasyExcel</li></ul><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul><li>Vue</li><li>Nuxt</li><li>ElementUI</li><li>Axios</li><li>ECharts</li></ul><h2 id="后台管理系统"><a href="#后台管理系统" class="headerlink" title="后台管理系统"></a>后台管理系统</h2><p>在线教育平台后台管理系统的前端使用的是vue-admin-template模板<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/BackendLogin.jpg"></p><h3 id="讲师管理"><a href="#讲师管理" class="headerlink" title="讲师管理"></a>讲师管理</h3><p>对讲师进行增删改查操作，后端集成了阿里云OSS，用于讲师头像的上传。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/AdminTeachers.png"><br><strong>开发中值得一提的：</strong><br>vue-router导航切换 时，如果两个路由都渲染同个组件，组件会重（chong）用,<br>组件的生命周期钩子（created）不会再被调用, 使得组件的一些数据无法根据 path的改变得到更新<br>因此：<br>1、我们可以在watch中监听路由的变化，当路由变化时，重新调用created中的内容<br>2、在init方法中我们判断路由的变化，如果是修改路由，则从api获取表单数据，  </p><p>如果是新增路由，则重新初始化表单数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 监听</span>    <span class="token function">$route</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 路由变化方式，路由发生变化，方法就会执行</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 页面渲染之前执行</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 判断路径是否有id值</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 从路径获取id值</span>        <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id        <span class="token comment">// 调用根据id查询的方法</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 路径没有id值，做添加</span>        <span class="token comment">// 清空表单</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>teacher <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="课程分类管理"><a href="#课程分类管理" class="headerlink" title="课程分类管理"></a>课程分类管理</h3><p>前端上传课程Excel表格，后端通过EasyExcel来处理表格并将其持久化存储于数据库中。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/CourseExcel.png"><br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/CourseCategory.png"></p><h3 id="课程管理"><a href="#课程管理" class="headerlink" title="课程管理"></a>课程管理</h3><p>可以查看课程详细信息并管理课程，如果是发布课程需要进行三个步骤，分别是“填写课程基本信息”、“创建课程大纲”、“最终发布”，需要按照该执行顺序去操作才能完整发布课程。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/CourseAdmin.png"><br><strong>值得一提的是课程视频上传的实现</strong>  </p><ol><li><p>引入依赖<br>引入依赖存在问题<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/DependencyProblem.png"><br>mvn需要配置环境变量，这样才能在命令行中使用mvn命令<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/MavenPath.png"><br>上传视频<br>参考官网压缩包里面的sample示例代码改造<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/ExampleCode.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> accessKeyId <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> accessKeySecret <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> title <span class="token operator">=</span> <span class="token string">"6 - How Does Project Submission Work - upload by sdk"</span><span class="token punctuation">;</span>  <span class="token comment">// 上传之后文件名称</span>        <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">"E:\\6 - What If I Want to Move Faster.mp4"</span><span class="token punctuation">;</span>   <span class="token comment">// 本地文件路径和名称</span>        <span class="token comment">// 上传视频的方法</span>        <span class="token class-name">UploadVideoRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UploadVideoRequest</span><span class="token punctuation">(</span>accessKeyId<span class="token punctuation">,</span> accessKeySecret<span class="token punctuation">,</span> title<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 可指定分片上传时每个分片的大小，默认为2M字节 */</span>        request<span class="token punctuation">.</span><span class="token function">setPartSize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 可指定分片上传时的并发线程数，默认为1，(注：该配置会占用服务器CPU资源，需根据服务器情况指定）*/</span>        request<span class="token punctuation">.</span><span class="token function">setTaskNum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UploadVideoImpl</span> uploader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UploadVideoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UploadVideoResponse</span> response <span class="token operator">=</span> uploader<span class="token punctuation">.</span><span class="token function">uploadVideo</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"VideoId="</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getVideoId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">/* 如果设置回调URL无效，不影响视频上传，可以返回VideoId同时会返回错误码。其他情况上传失败时，VideoId为空，此时需要根据返回错误码分析具体错误原因 */</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"VideoId="</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getVideoId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ErrorCode="</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ErrorMessage="</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 服务端口</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token comment"># 服务名</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span>vod  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token comment"># 环境设置：dev、test、prod</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">multipart</span><span class="token punctuation">:</span>      <span class="token comment"># 最大上传单个文件大小：默认1M</span>      <span class="token key atrule">max-file-size</span><span class="token punctuation">:</span> 1024MB      <span class="token comment"># 最大总上传的数据大小：默认10MB</span>      <span class="token key atrule">max-request-size</span><span class="token punctuation">:</span> 1024MB<span class="token comment"># 阿里云 vod</span><span class="token comment"># 不同的服务器，地址不同</span><span class="token key atrule">aliyun</span><span class="token punctuation">:</span>  <span class="token key atrule">vod</span><span class="token punctuation">:</span>    <span class="token key atrule">file</span><span class="token punctuation">:</span>      <span class="token key atrule">keyid</span><span class="token punctuation">:</span>       <span class="token key atrule">keysecret</span><span class="token punctuation">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>VodApplication</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.invictusqiu"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VodApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">VodApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>工具类<br>常量读取工具类，读取配置文件的内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstantVodUtils</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${aliyun.vod.file.keyid}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> keyid<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${aliyun.vod.file.keysecret}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> keysecret<span class="token punctuation">;</span>    <span class="token comment">// 定义公开常量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">ACCESS_KEY_ID</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">ACCESS_KEY_SECRET</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token constant">ACCESS_KEY_ID</span> <span class="token operator">=</span> keyid<span class="token punctuation">;</span>        <span class="token constant">ACCESS_KEY_SECRET</span> <span class="token operator">=</span> keysecret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>控制器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/eduvod/video"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VodController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">VodService</span> vodService<span class="token punctuation">;</span>    <span class="token comment">// 上传视频到阿里云</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"uploadAlyVideo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">uploadAlyVideo</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 返回上传视频id</span>        <span class="token class-name">String</span> videoId <span class="token operator">=</span> vodService<span class="token punctuation">.</span><span class="token function">uploadVideoAly</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"videoId"</span><span class="token punctuation">,</span>videoId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>服务实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VodServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">VodService</span> <span class="token punctuation">{</span>    <span class="token comment">// 上传视频到阿里云（采用流式上传接口）</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">uploadVideoAly</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// accessKeyId, accessKeySecret</span>            <span class="token comment">// fileName: 上传文件原始名称</span>            <span class="token comment">// 01.03.09.mp4</span>            <span class="token class-name">String</span> fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// title: 上传之后显示名称</span>            <span class="token comment">// 去除最后一个.</span>            <span class="token class-name">String</span> title <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> fileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// inputStream: 上传文件输入流</span>            <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">UploadStreamRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UploadStreamRequest</span><span class="token punctuation">(</span><span class="token class-name">ConstantVodUtils</span><span class="token punctuation">.</span><span class="token constant">ACCESS_KEY_ID</span><span class="token punctuation">,</span> <span class="token class-name">ConstantVodUtils</span><span class="token punctuation">.</span><span class="token constant">ACCESS_KEY_SECRET</span><span class="token punctuation">,</span> title<span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">UploadVideoImpl</span> uploader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UploadVideoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">UploadStreamResponse</span> response <span class="token operator">=</span> uploader<span class="token punctuation">.</span><span class="token function">uploadStream</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> videoId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                videoId <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getVideoId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">//如果设置回调URL无效，不影响视频上传，可以返回VideoId同时会返回错误码。其他情况上传失败时，VideoId为空，此时需要根据返回错误码分析具体错误原因</span>                videoId <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getVideoId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> videoId<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>前端<br>chapter.vue</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>上传视频<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-upload</span>  <span class="token attr-name">:on-success</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleVodUploadSuccess<span class="token punctuation">"</span></span>  <span class="token attr-name">:on-remove</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleVodRemove<span class="token punctuation">"</span></span>  <span class="token attr-name">:before-remove</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeVodRemove<span class="token punctuation">"</span></span>  <span class="token attr-name">:on-exceed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleUploadExceed<span class="token punctuation">"</span></span>  <span class="token attr-name">:file-list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileList<span class="token punctuation">"</span></span>  <span class="token attr-name">:action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BASE_API + '/eduvod/video/uploadAlyVideo'<span class="token punctuation">"</span></span>  <span class="token attr-name">:limit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload-demo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>上传视频<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tooltip</span> <span class="token attr-name">placement</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right-end<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>最大支持1G，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>      支持3GP、ASF、AVI、DAT、DV、FLV、F4V、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>      GIF、M2T、M4V、MJ2、MJPEG、MKV、MOV、MP4、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>      MPE、MPG、MPEG、MTS、OGG、QT、RM、RMVB、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>      SWF、TS、VOB、WMV、WEBM 等视频格式上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-question<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tooltip</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-upload</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">fileList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 上传视频的列表</span><span class="token constant">BASE_API</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_API</span> <span class="token comment">// 接口API地址</span><span class="token comment">// 成功回调</span><span class="token function">handleVodUploadSuccess</span><span class="token punctuation">(</span><span class="token parameter">response<span class="token punctuation">,</span> file<span class="token punctuation">,</span> fileList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>video<span class="token punctuation">.</span>videoSourceId <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>videoId<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 视图上传多于一个视频</span><span class="token function">handleUploadExceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">'想要重新上传视频，请先删除已上传的视频'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>nginx配置</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">location ~ /eduvod/ {    proxy_pass http://localhost:8082;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置nginx上传文件大小，否则上传时会有 413 (Request Entity Too Large) 异常<br>打开nginx主配置文件nginx.conf，找到http{}，添加</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">client_max_body_size 1024m;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果数据库没有视频名称<br>修改前端</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 上传视频成功调用的方法</span><span class="token function">handleVodUploadSuccess</span><span class="token punctuation">(</span><span class="token parameter">response<span class="token punctuation">,</span> file<span class="token punctuation">,</span> fileList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 上传视频id赋值</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>video<span class="token punctuation">.</span>videoSourceId <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>videoId  <span class="token comment">// 上传视频名称赋值</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>video<span class="token punctuation">.</span>videoOriginalName <span class="token operator">=</span> file<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="统计分析"><a href="#统计分析" class="headerlink" title="统计分析"></a>统计分析</h3><p>统计分析页面，前端页面使用Echarts组件库实现图表展示，用户可以选择指定日期范围生成统计数据，包括范围内的用户登录数和注册数，以及课程播放数等数据。</p><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/StatisticalAnalysis.png"><br>该模块使用了Feign远程调用<br>比如调用接口UcenterClient</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"service-ucenter"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UcenterClient</span> <span class="token punctuation">{</span>    <span class="token comment">// 查询某一天注册人数</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/educenter/member/countRegister/{day}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">countRegister</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"day"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>StatisticsDailyServiceImpl服务实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">UcenterClient</span> ucenterClient<span class="token punctuation">;</span><span class="token comment">// 统计某一天注册人数，生成统计数据</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerCount</span><span class="token punctuation">(</span><span class="token class-name">String</span> day<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 添加记录之前删除表相同日期的数据</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StatisticsDaily</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"date_calculated"</span><span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>    baseMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 远程调用得到某一天注册人数</span>    <span class="token class-name">Result</span> registerResult <span class="token operator">=</span> ucenterClient<span class="token punctuation">.</span><span class="token function">countRegister</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> countRegister <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>registerResult<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"countRegister"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把获取数据添加数据库，统计分析表里面</span>    <span class="token class-name">StatisticsDaily</span> sta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatisticsDaily</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sta<span class="token punctuation">.</span><span class="token function">setRegisterNum</span><span class="token punctuation">(</span>countRegister<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注册人数</span>    sta<span class="token punctuation">.</span><span class="token function">setDateCalculated</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//统计日期</span>    sta<span class="token punctuation">.</span><span class="token function">setVideoViewNum</span><span class="token punctuation">(</span><span class="token class-name">RandomUtils</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sta<span class="token punctuation">.</span><span class="token function">setLoginNum</span><span class="token punctuation">(</span><span class="token class-name">RandomUtils</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sta<span class="token punctuation">.</span><span class="token function">setCourseNum</span><span class="token punctuation">(</span><span class="token class-name">RandomUtils</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    baseMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sta<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除此之外，启用定时任务实现每天统计<br>启动类添加注释</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableScheduling</span> <span class="token comment">//定时任务注解</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建ScheduleTask类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduleTask</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StatisticsDailyService</span> staService<span class="token punctuation">;</span>    <span class="token comment">/* 定时器测试 0/5 * * * * ?表示每隔5秒执行一次这个方法    @Scheduled(cron = "0/5 * * * * ?")    public void task1() {        System.out.println("********************task1执行了...");    }*/</span>    <span class="token comment">// 在每天凌晨1点，把前一天的数据进行数据查询添加</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 0 1 * * ?"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">task2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        staService<span class="token punctuation">.</span><span class="token function">registerCount</span><span class="token punctuation">(</span><span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">addDays</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前台用户系统"><a href="#前台用户系统" class="headerlink" title="前台用户系统"></a>前台用户系统</h2><h3 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h3><p>Nuxt.js 是一个基于 Vue.js 的轻量级应用框架,可用来创建服务端渲染 (SSR) 应用,也可充当静态站点引擎生成静态站点应用,具有优雅的代码结构分层和热加载等特性。<br>官方网站：<br><a href="https://zh.nuxtjs.org/">https://zh.nuxtjs.org/</a><br>幻灯片插件：vue-awesome-swiper</p><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p>展示轮播图、热门课程等信息，然后对用户展示网站幻灯片、热门课程、名师等内容，为了提高访问速度使用了Redis缓存首页数据。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/HomePage.png"></p><h3 id="注册和登录"><a href="#注册和登录" class="headerlink" title="注册和登录"></a>注册和登录</h3><p>注册功能需要用户通过填写昵称、手机号，然后接收验证码的方式进行注册。如果使用手机号码注册，系统会通过阿里云短信服务向该用户发送短信验证码，后端保存该验证码来和用户输入的验证码进行比对。如果用户是以扫描微信二维码的方式进行注册，后端接收到该请求后会将页面重定向至二维码页面，扫码之后获得微信官方返回的临时票据，使用票据可以获得该用户微信账号的访问凭证和唯一标识，然后请求微信官方的接口地址得到该用户的账号信息，并将其持久化存储于数据库中，实现微信扫码注册功能。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/RegisterPage.png"><br>值得一提的是使用Redis解决验证码有效时间问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// springboot整合的Redis模板对象</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span><span class="token comment">// 发送短信的方法</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"send/{phone}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">sendMsm</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.从redis获取验证码，如果获取到直接返回</span>    <span class="token class-name">String</span> code <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 2.如果redis获取不到，进行阿里云发送</span>    <span class="token comment">// 生成随机值，传递阿里云进行发送</span>    code <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">getFourBitRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> param <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    param<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用service发送短信的方法</span>    <span class="token keyword">boolean</span> isSend <span class="token operator">=</span> msmService<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isSend<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 发送成功，把发送成功验证码放到redis里面</span>        <span class="token comment">// 设置有效时间</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span>code<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"短信发送失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="课程列表"><a href="#课程列表" class="headerlink" title="课程列表"></a>课程列表</h3><p>课程列表，展示上架课程，对不同种类的课程进行了分类，可以按照销量、发布时间、售价来对课程列表进行排序。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/CourseSchedule.png"><br>后端处理条件分页</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1.条件查询带分页查询课程</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCourseFrontList</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EduCourse</span><span class="token punctuation">&gt;</span></span> pageCourse<span class="token punctuation">,</span> <span class="token class-name">CourseFrontVo</span> courseFrontVo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EduCourse</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 判断条件值是否为空，不为空拼接</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>courseFrontVo<span class="token punctuation">.</span><span class="token function">getSubjectParentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//一级分类</span>        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"subject_parent_id"</span><span class="token punctuation">,</span> courseFrontVo<span class="token punctuation">.</span><span class="token function">getSubjectParentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>courseFrontVo<span class="token punctuation">.</span><span class="token function">getSubjectId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//二级分类</span>        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"subject_id"</span><span class="token punctuation">,</span>courseFrontVo<span class="token punctuation">.</span><span class="token function">getSubjectId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>courseFrontVo<span class="token punctuation">.</span><span class="token function">getBuyCountSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//关注度</span>        wrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"buy_count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>courseFrontVo<span class="token punctuation">.</span><span class="token function">getGmtCreateSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//最新</span>        wrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"gmt_create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>courseFrontVo<span class="token punctuation">.</span><span class="token function">getPriceSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//价格</span>        wrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 只获取发布状态的课程</span>    wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span><span class="token string">"Normal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    baseMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>pageCourse<span class="token punctuation">,</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EduCourse</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> pageCourse<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> current <span class="token operator">=</span> pageCourse<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> pages <span class="token operator">=</span> pageCourse<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> size <span class="token operator">=</span> pageCourse<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> total <span class="token operator">=</span> pageCourse<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> hasNext <span class="token operator">=</span> pageCourse<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> hasPrevious <span class="token operator">=</span> pageCourse<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把分页数据获取出来，放到map集合</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"items"</span><span class="token punctuation">,</span> records<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pages"</span><span class="token punctuation">,</span> pages<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hasNext"</span><span class="token punctuation">,</span> hasNext<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hasPrevious"</span><span class="token punctuation">,</span> hasPrevious<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// map返回</span>    <span class="token keyword">return</span> map<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="课程详情"><a href="#课程详情" class="headerlink" title="课程详情"></a>课程详情</h3><p>课程详情页，包含课程基本信息、分类、讲师等内容，课程分为免费和付费，如果是付费课程，那么前端的“立即观看”按钮会变为“立即购买”按钮，并且在该页面用户可以发表对该课程的评论。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/CourseDetail.png"></p><h3 id="视频播放"><a href="#视频播放" class="headerlink" title="视频播放"></a>视频播放</h3><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/VodPlayer.png"></p><h4 id="获取播放地址"><a href="#获取播放地址" class="headerlink" title="获取播放地址"></a>获取播放地址</h4><p>参考文档：<a href="https://help.aliyun.com/document_detail/61064.html">https://help.aliyun.com/document_detail/61064.html</a><br>前面的 03-使用服务端SDK 介绍了如何获取非加密视频的播放地址。直接使用03节的例子获取加密视频播放地址会返回如下错误信息<br>Currently only the AliyunVoDEncryption stream exists, you must use the Aliyun player to play or set the value of ResultType to Multiple.<br>目前只有AliyunVoDEncryption流存在，您必须使用Aliyun player来播放或将ResultType的值设置为Multiple。<br>因此在testGetPlayInfo测试方法中添加 ResultType 参数，并设置为true  </p><pre class="line-numbers language-none"><code class="language-none">privateParams.put("ResultType", "Multiple");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此种方式获取的视频文件不能直接播放，必须使用阿里云播放器播放</p><h4 id="视频播放器"><a href="#视频播放器" class="headerlink" title="视频播放器"></a>视频播放器</h4><p>参考文档：<a href="https://help.aliyun.com/document_detail/61109.html">https://help.aliyun.com/document_detail/61109.html</a></p><p><strong>视频播放器介绍</strong><br>阿里云播放器SDK（ApsaraVideo Player SDK）是阿里视频服务的重要一环，除了支持点播和直播的基础播放功能外，深度融合视频云业务，如支持视频的加密播放、安全下载、清晰度切换、直播答题等业务场景，为用户提供简单、快速、安全、稳定的视频播放服务。</p><p><strong>集成视频播放器</strong><br>参考文档：<a href="https://help.aliyun.com/document_detail/51991.html">https://help.aliyun.com/document_detail/51991.html</a><br>参考 【播放器简单使用说明】一节<br>引入脚本文件和css文件</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;link rel=<span class="token string">"stylesheet"</span> href=<span class="token string">"https://g.alicdn.com/de/prismplayer/2.8.1/skins/default/aliplayer-min.css"</span> /&gt;&lt;script charset=<span class="token string">"utf-8"</span> type=<span class="token string">"text/javascript"</span> src=<span class="token string">"https://g.alicdn.com/de/prismplayer/2.8.1/aliplayer-min.js"</span>&gt;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>初始化视频播放器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prism-player<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>J_prismPlayer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Aliplayer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'J_prismPlayer'</span><span class="token punctuation">,</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>            <span class="token literal-property property">autoplay</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token literal-property property">cover</span><span class="token operator">:</span> <span class="token string">'http://liveroom-img.oss-cn-qingdao.aliyuncs.com/logo.png'</span><span class="token punctuation">,</span>              <span class="token comment">//播放配置</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">player</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'播放器创建好了。'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1. 播放地址播放</strong><br>在Aliplayer的配置参数中添加如下属性</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//播放方式一：支持播放地址播放,此播放优先级最高，此种方式不能播放加密视频source : '你的视频播放地址',<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动浏览器运行，测试视频的播放</p><p><strong>2. 播放凭证播放（推荐）</strong><br>阿里云播放器支持通过播放凭证自动换取播放地址进行播放，接入方式更为简单，且安全性更高。播放凭证默认时效为100秒（最大为3000秒），只能用于获取指定视频的播放地址，不能混用或重复使用。如果凭证过期则无法获取播放地址，需要重新获取凭证。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">encryptType:'1',//如果播放加密视频，则需设置encryptType=1，非加密视频无需设置此项vid : '视频id',playauth : '视频授权码',<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：播放凭证有过期时间，默认值：100秒 。取值范围：100~3000。<br>设置播放凭证的有效期<br>在获取播放凭证的测试用例中添加如下代码  </p><pre class="line-numbers language-none"><code class="language-none">request.setAuthInfoTimeout(200L);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在线配置参考：<a href="https://player.alicdn.com/aliplayer/setting/setting.html">https://player.alicdn.com/aliplayer/setting/setting.html</a></p><h4 id="后端获取播放凭证"><a href="#后端获取播放凭证" class="headerlink" title="后端获取播放凭证"></a>后端获取播放凭证</h4><p><strong>播放组件相关文档</strong><br>集成文档：<a href="https://help.aliyun.com/document_detail/51991.html?spm=a2c4g.11186623.2.39.478e192b8VSdEn">https://help.aliyun.com/document_detail/51991.html?spm=a2c4g.11186623.2.39.478e192b8VSdEn</a><br>在线配置：<a href="https://player.alicdn.com/aliplayer/setting/setting.html">https://player.alicdn.com/aliplayer/setting/setting.html</a><br>功能展示：<a href="https://player.alicdn.com/aliplayer/presentation/index.html">https://player.alicdn.com/aliplayer/presentation/index.html</a>  </p><h3 id="整合阿里云视频播放器"><a href="#整合阿里云视频播放器" class="headerlink" title="整合阿里云视频播放器"></a>整合阿里云视频播放器</h3><h4 id="后端-1"><a href="#后端-1" class="headerlink" title="后端"></a>后端</h4><p>修改VideoVo</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoVo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> videoSourceId<span class="token punctuation">;</span>   <span class="token comment">//视频id</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>VodController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据视频id获取视频凭证</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"getPlayAuth/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">getPlayAuth</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建初始化对象</span>        <span class="token class-name">DefaultAcsClient</span> client <span class="token operator">=</span>                <span class="token class-name">InitVodClient</span><span class="token punctuation">.</span><span class="token function">initVodClient</span><span class="token punctuation">(</span><span class="token class-name">ConstantVodUtils</span><span class="token punctuation">.</span><span class="token constant">ACCESS_KEY_ID</span><span class="token punctuation">,</span><span class="token class-name">ConstantVodUtils</span><span class="token punctuation">.</span><span class="token constant">ACCESS_KEY_SECRET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建获取凭证request和response对象</span>        <span class="token class-name">GetVideoPlayAuthRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetVideoPlayAuthRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 向request设置视频id</span>        request<span class="token punctuation">.</span><span class="token function">setVideoId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用方法得到凭证</span>        <span class="token class-name">GetVideoPlayAuthResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getAcsResponse</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> playAuth <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getPlayAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"playAuth"</span><span class="token punctuation">,</span>playAuth<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EduException</span><span class="token punctuation">(</span><span class="token number">20001</span><span class="token punctuation">,</span><span class="token string">"获取凭证失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h4><p>api<br>vod.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">getPlayAuth</span><span class="token punctuation">(</span><span class="token parameter">vid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/eduvod/video/getPlayAuth/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>vid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'get'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建新的layouts<br>video.vue</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>guli-player<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>head<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>在线教育<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>~/assets/img/logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">lt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>在线教育<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nuxt</span> <span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">html,body</span> <span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.head</span> <span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.head .logo</span> <span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.body</span> <span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>_id.vue<br>点击小节携带视频id跳转</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>/player/'+video.videoSourceId<span class="token punctuation">"</span></span> <span class="token attr-name">title</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建Page/player/_vid.vue  </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 阿里云视频播放器样式 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://g.alicdn.com/de/prismplayer/2.8.1/skins/default/aliplayer-min.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 定义播放器dom --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>J_prismPlayer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prism-player<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://g.alicdn.com/de/prismplayer/2.8.1/aliplayer-min.js<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> vod <span class="token keyword">from</span> <span class="token string">'@/api/vod'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">layout</span><span class="token operator">:</span> <span class="token string">'video'</span><span class="token punctuation">,</span> <span class="token comment">// 使用video布局</span>  <span class="token function">asyncData</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> params<span class="token punctuation">,</span> error <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> vod<span class="token punctuation">.</span><span class="token function">getPlayAuth</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>vid<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          <span class="token literal-property property">playAuth</span><span class="token operator">:</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>playAuth<span class="token punctuation">,</span>          <span class="token literal-property property">vid</span><span class="token operator">:</span> params<span class="token punctuation">.</span>vid        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Aliplayer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'J_prismPlayer'</span><span class="token punctuation">,</span>      <span class="token literal-property property">vid</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vid<span class="token punctuation">,</span> <span class="token comment">// 视频id</span>      <span class="token literal-property property">playauth</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>playAuth<span class="token punctuation">,</span> <span class="token comment">// 播放凭证</span>      <span class="token comment">// encryptType: '1', // 如果播放加密视频，则需设置encryptType=1，非加密视频无需设置此项</span>      <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>      <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">'500px'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">player</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'播放器创建成功'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>排错</p><blockquote><p>先看看播放器的js有没有引入<br>摁下F12，在网络中（network）查看，如果没有可以尝试在nuxt.config.js文件中的head中添加。<br>不要删除原_vid.vue中的</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script charset<span class="token operator">=</span><span class="token string">"utf-8"</span> type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"https://g.alicdn.com/de/prismplayer/2.8.1/aliplayer-min.js"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把它放到<code>&lt;template&gt;&lt;/template&gt;</code>标签外</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">head</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token literal-property property">script</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">'https://g.alicdn.com/de/prismplayer/2.8.1/aliplayer-min.js'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="名师列表"><a href="#名师列表" class="headerlink" title="名师列表"></a>名师列表</h3><p>得到所有讲师信息，显示所有名师的头像、名称、简介内容。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/TeacherList.png"></p><h3 id="讲师详情"><a href="#讲师详情" class="headerlink" title="讲师详情"></a>讲师详情</h3><p>在名师列表页可以选择不同讲师的卡片，通过携带讲师id请求后端接口来查询该讲师的信息和所授课程，页面中展示了名师的详细信息和所授课程。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/TeacherDetail.png"></p><h3 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h3><p>课程支付，用户只有登录后才能购买对应课程。购买会生成课程订单和微信支付的二维码，在此支付期间每隔3秒会查询支付状态，只有扫码成功后才更新数据库中该订单的支付状态，一旦查询支付状态为“已支付”才能为用户开通课程观看权限。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/OrderPay.png"><br>服务实现代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span><span class="token comment">// 生成微信支付二维码接口</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">createNative</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderNo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 1.根据订单号查询订单信息</span>        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"order_no"</span><span class="token punctuation">,</span>orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Order</span> order <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.使用map设置生成二维码需要的参数</span>        <span class="token class-name">Map</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"appid"</span><span class="token punctuation">,</span> <span class="token string">"wx74862e0dfcf69954"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mch_id"</span><span class="token punctuation">,</span> <span class="token string">"1558950191"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"nonce_str"</span><span class="token punctuation">,</span> <span class="token class-name">WXPayUtil</span><span class="token punctuation">.</span><span class="token function">generateNonceStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getCourseTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">,</span> orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"total_fee"</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getTotalFee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"spbill_create_ip"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"notify_url"</span><span class="token punctuation">,</span> <span class="token string">"http://guli.shop/api/order/weixinPay/weixinNotify\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"trade_type"</span><span class="token punctuation">,</span> <span class="token string">"NATIVE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3.发送httpClient请求，传递参数xml格式，微信支付提供的固定地址</span>        <span class="token class-name">HttpClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token string">"https://api.mch.weixin.qq.com/pay/unifiedorder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置xml格式的参数</span>        client<span class="token punctuation">.</span><span class="token function">setXmlParam</span><span class="token punctuation">(</span><span class="token class-name">WXPayUtil</span><span class="token punctuation">.</span><span class="token function">generateSignedXml</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token string">"T6m9iK73b0kn9g5v426MKfHQH7X8rKwb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">setHttps</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行请求发送</span>        client<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4.得到发送请求返回的结果</span>        <span class="token comment">// 返回内容，是使用xml格式返回</span>        <span class="token class-name">String</span> xml <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 把xml格式转换map集合，把map集合返回</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> resultMap <span class="token operator">=</span> <span class="token class-name">WXPayUtil</span><span class="token punctuation">.</span><span class="token function">xmlToMap</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//最终返回数据的封装</span>        <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">,</span> orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"course_id"</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getCourseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"total_fee"</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getTotalFee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"result_code"</span><span class="token punctuation">,</span> resultMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"result_code"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 返回二维码操作状态码</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code_url"</span><span class="token punctuation">,</span> resultMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"code_url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//二维码地址</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EduException</span><span class="token punctuation">(</span><span class="token number">20001</span><span class="token punctuation">,</span><span class="token string">"生成二维码失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="项目仓库"><a href="#项目仓库" class="headerlink" title="项目仓库"></a>项目仓库</h2><p>后端：</p><ul><li><a href="https://github.com/InvictusEd/online-education-platform-backend">https://github.com/InvictusEd/online-education-platform-backend</a></li></ul><p>前端：</p><ul><li><a href="https://github.com/InvictusEd/online-education-platform-frontend-management">https://github.com/InvictusEd/online-education-platform-frontend-management</a>  </li><li><a href="https://github.com/InvictusEd/online-education-platform-frontend">https://github.com/InvictusEd/online-education-platform-frontend</a></li></ul><h2 id="开发日志以及论文成果"><a href="#开发日志以及论文成果" class="headerlink" title="开发日志以及论文成果"></a>开发日志以及论文成果</h2><p>链接：<a href="https://pan.baidu.com/s/19poiZHY7C4HyjostpuOj2Q?pwd=yyds">https://pan.baidu.com/s/19poiZHY7C4HyjostpuOj2Q?pwd=yyds</a><br>提取码：yyds </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h2&gt;&lt;p&gt;由于在开发该系统时，并未有书写开发文档的经验，而仅仅是记录了每一天的开发日志，但开发日志多达21篇，因此把所有开发日志放在博客当中是影响读者</summary>
      
    
    
    
    <category term="Project" scheme="http://invictusqiu.com/categories/Project/"/>
    
    
    <category term="Java" scheme="http://invictusqiu.com/tags/Java/"/>
    
    <category term="Spring Boot" scheme="http://invictusqiu.com/tags/Spring-Boot/"/>
    
    <category term="Spring Cloud" scheme="http://invictusqiu.com/tags/Spring-Cloud/"/>
    
    <category term="Vue" scheme="http://invictusqiu.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>将我的blog部署在云服务器ECS上</title>
    <link href="http://invictusqiu.com/2023/04/15/DeployBlog/"/>
    <id>http://invictusqiu.com/2023/04/15/DeployBlog/</id>
    <published>2023-04-15T07:33:22.000Z</published>
    <updated>2024-09-21T08:19:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>这次的网站部署工作还挺不容易的，是一次非常新奇的尝试，从此刻执笔写下这篇文章开始，我已经意识到这将是一个漫长的过程，也说明本篇的内容很长，对于我或是读者来说都是一段漫长的征途了。  </p><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_2.png" alt="网站主页" title="网站主页">  </p><p>早在一年前我就搭建好了我的blog，并且购买并配置了域名，那时候我的blog一直都是在GitHub Pages上的，但是访问速度实在太慢，于是想到把blog部署到国内的服务器上，本篇文章记录的正是这个部署的过程。</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>那首先我得有一台国内的服务器，因此我购买了一台云服务器ECS。</p><blockquote><p>服务器的操作系统是<strong>CentOS  7.9 64位</strong></p></blockquote><p>之后配置服务器的过程，因为不同的操作系统命令会有区别，还请读者根据自己的操作系统查询命令。</p><h2 id="安装MATE桌面环境"><a href="#安装MATE桌面环境" class="headerlink" title="安装MATE桌面环境"></a>安装MATE桌面环境</h2><p><strong>这个环节是非必要的，读者可跳过，这只是我熟悉服务器的一个小过程。</strong>  </p><p>1.执行以下命令，更新系统的软件包  </p><pre class="line-numbers language-none"><code class="language-none">yum -y upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.依次执行以下命令，安装MATE桌面环境<br><strong>之后会出现一些提示，都让他通过就行</strong></p><pre class="line-numbers language-none"><code class="language-none">yum groups install "X Window System"yum groups install "MATE Desktop"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.设置默认使用图形化桌面环境启动实例</p><pre class="line-numbers language-none"><code class="language-none">systemctl set-default graphical.target<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.执行以下命令重启ECS实例，也可以在控制台手动重启</p><pre class="line-numbers language-none"><code class="language-none">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_7.png" alt="控制台重启ECS" title="控制台重启ECS"></p><p>5.之后通过ECS管理控制台的VNC连接实例就可以进入到图形界面<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_8.png" alt="VNC连接ECS" title="VNC连接ECS"><br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_9.png" alt="图形界面" title="图形界面"></p><p>更多的详细过程可参考阿里云的文档：<br><a href="https://help.aliyun.com/document_detail/41227.html">如何在Linux系统的ECS实例中安装图形界面</a></p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><blockquote><p>Git 是分布式版本控制系统，有了它我们能很容易地进行主机与服务器的同步  </p></blockquote><p>1.首先查看服务器上是否有安装Git</p><pre class="line-numbers language-none"><code class="language-none">git --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.执行以下命令安装Git</p><pre class="line-numbers language-none"><code class="language-none">yum install git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后碰到提示直接输入y通过。安装完成会出现<strong>Complete!</strong>  </p><p>3.执行以下命令创建一个Git用户</p><pre class="line-numbers language-none"><code class="language-none">useradd git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.设置Git账户的密码</p><pre class="line-numbers language-none"><code class="language-none">passwd git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_10.png" alt="设置Git账户和密码" title="设置Git账户和密码"></p><h2 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h2><blockquote><p>要想实现主机和服务器的Git连接，我们需要给到服务器我们主机的密钥</p></blockquote><p>首先主机上要安装Git，主机Git的安装过程在此略过……<br>之前我一直都用着Git，所以已经配置过ssh，但为了温故而知新，咱们从头再来配置一遍。</p><h3 id="生成ssh"><a href="#生成ssh" class="headerlink" title="生成ssh"></a>生成ssh</h3><p>1.我们在<strong>Desktop右键选择Git Bash Here</strong>，然后输入命令，引号内为你的Git用户名</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name '用户名'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.输入邮箱</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.email '邮箱'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后可以输入以下命令确认下账户</p><pre class="line-numbers language-none"><code class="language-none">git config --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.输入以下命令生成ssh，遇到暂停输入的情况就按下回车</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C "邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_11.png" alt="配置ssh" title="配置ssh"><br><code>之后可以在C:\Users\用户名\.ssh目录下看到ssh</code></p><h3 id="更新Github的SSHkey"><a href="#更新Github的SSHkey" class="headerlink" title="更新Github的SSHkey"></a>更新Github的SSHkey</h3><p><strong>因为这里我们的ssh变了，所以Github上的ssh也应该重新设置下</strong>  </p><p>登录Github，点击个人头像中的Settings，找到SSH and GPG keys，删除原来的SSH Keys，建立新的SSH Keys  </p><p><strong>在ssh目录下找到id_rsa.pub</strong>，拷贝其中内容到GithubSSHkey中<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_12.png" alt="Github的SSH keys" title="Github的SSH keys"></p><p>OK，之后我们在使用Git管理你的Github仓库时就不会出问题了。</p><h3 id="将公钥给服务器"><a href="#将公钥给服务器" class="headerlink" title="将公钥给服务器"></a>将公钥给服务器</h3><p>将公钥给到服务器，在ssh目录下右键选择Git Bash Here，输入以下命令</p><pre class="line-numbers language-none"><code class="language-none">ssh-copy-id -i id_rsa.pub git@服务器IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注：服务器IP地址为公网IP地址</p></blockquote><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_13.png" alt="将公钥给服务器" title="将公钥给服务器"></p><p>好的，到这里我们的ssh全部完成，让我们回到服务器上。</p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><blockquote><p>Nginx是一个高性能的HTTP和反向代理服务器，我选择使用Nginx来作为web服务器。</p></blockquote><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><p>1.执行以下命令安装Nginx，版本我选择了1.20.2</p><pre class="line-numbers language-none"><code class="language-none">wget http://nginx.org/download/nginx-1.20.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.安装依赖</p><pre class="line-numbers language-none"><code class="language-none">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.上一步完成后，解压依赖</p><pre class="line-numbers language-none"><code class="language-none">tar -zxvf nginx-1.20.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.解压后进行配置，依次输入以下命令</p><pre class="line-numbers language-none"><code class="language-none">cd nginx-1.20.2./configure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_14.png" alt="配置Nginx" title="配置Nginx"><br>之后再依次输入以下命令</p><pre class="line-numbers language-none"><code class="language-none">makemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>到此Nginx就安装好了。</p><h3 id="运行Nginx及欢迎页面问题"><a href="#运行Nginx及欢迎页面问题" class="headerlink" title="运行Nginx及欢迎页面问题"></a>运行Nginx及欢迎页面问题</h3><p>进入到nginx文件夹下的sbin目录启动nginx，依次执行以下命令</p><pre class="line-numbers language-none"><code class="language-none">cd /usr/local/nginx/sbin./nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_15.png" alt="运行Nginx" title="运行Nginx"></p><p>之后在浏览器输入服务器的公网IP地址，就会出现Nginx的欢迎页面  </p><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_16.png" alt="Nginx欢迎页面" title="Nginx欢迎页面"></p><p>也有可能出现CentOS的欢迎页面  </p><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_17.png" alt="CentOS欢迎页面" title="CentOS欢迎页面"></p><p><strong>关于出现Nginx或CentOS页面的问题，我当时在这卡了一段时间，因为我格式化过服务器，第一次安装Nginx时出现的是Nginx的欢迎页面，第二次安装Nginx就出现了CentOS的欢迎页面，我就以为Nginx没安装成功，但是查看Nginx的确实在运行，于是找了下问题所在：</strong></p><blockquote><p>检查了阿里云的安全组策略，Nginx的安装步骤，都没有发现问题，安装Nginx时阅读nginx.conf配置文件会发现欢迎页index.html文件路径。找到上面路径下的html文件，通过阅读发现这就是CentOS欢迎页面显示的内容，这证明安装Nginx的欢迎页已经不是Nginx欢迎页面了，所以我们的Nginx安装是完全正确的，只是显示页面改变了。</p></blockquote><h3 id="Nginx页面无法访问和服务器防火墙问题"><a href="#Nginx页面无法访问和服务器防火墙问题" class="headerlink" title="Nginx页面无法访问和服务器防火墙问题"></a>Nginx页面无法访问和服务器防火墙问题</h3><p>在面对防火墙之前，我们找到服务器的网络安全组，看一看有没有开放<strong>80端口</strong>，没有的话要添加一个。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_18.png" alt="开放80端口" title="开放80端口"></p><p>然后我们回到服务器。  </p><p>1.查看防火墙状态</p><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --state<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有运行，执行以下命令运行起来</p><pre class="line-numbers language-none"><code class="language-none">systemctl start firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次查看防火墙的状态会显示 <code>running</code>  </p><p>2.依次执行以下命令，手动开放80端口</p><pre class="line-numbers language-none"><code class="language-none">iptables -I INPUT -p tcp --dport 80 -j ACCEPTfirewall-cmd --permanent --add-port=80/tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>出现<code>success</code><br>至此问题解决，可以正常访问Nginx欢迎页面。</p><h2 id="创建blog仓库和部署"><a href="#创建blog仓库和部署" class="headerlink" title="创建blog仓库和部署"></a>创建blog仓库和部署</h2><p>到这一步可以说是万事俱备，只欠东风了，现在我们需要进行：  </p><ol><li>新建仓库用来存放网站的内容</li><li>提交后把内容自动同步到站点目录</li></ol><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>1.依次执行以下命令进入git目录，新建一个仓库</p><pre class="line-numbers language-none"><code class="language-none">cd /home/gitgit init --bare blog.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.进入hooks文件夹</p><pre class="line-numbers language-none"><code class="language-none">cd blog.git/cd hooks/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_19.png" alt="创建仓库" title="创建仓库"></p><h3 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h3><p><strong>Git 钩子：Git 钩子是每次在 Git 存储库中发生特定事件时自动运行的脚本。它们允许您自定义 Git 的内部行为，并在开发生命周期的关键点触发可自定义的操作。</strong></p><ul><li>Git 钩子(hooks)是在 Git 仓库中特定事件(certain points)触发后被调用的脚本。</li><li>通过钩子可以自定义 Git 内部的相关（如 git push）行为，关键点（如 git push）触发自定义的行为。</li><li>Git 含有两种类型的钩子：客户端的和服务器端。</li><li>客户端钩子由诸如提交和合并这样的操作所调用，而服务器端钩子作用于接收部署提交的代码。实现服务器和本地的git互通。</li></ul><p>Git 钩子存在于每个 Git 仓库的 .git/hooks 目录中。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_20.png" alt="Git 钩子" title="Git 钩子"></p><p>1.编写post-receive脚本</p><pre class="line-numbers language-none"><code class="language-none">vi post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入i进入INSERT模式，内容如下</p><pre class="line-numbers language-none"><code class="language-none">#!/bin/bash#nginx下html文件夹目录DIR=/usr/local/naginx/htmlgit --work-tree=${DIR} clean -fd#直接强制检出git --work-tree=${DIR} checkout --force<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写好后ESC退出INSERT模式，:wq保存退出</p><p>2.授予运行权限</p><pre class="line-numbers language-none"><code class="language-none">chmod +x post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.授予git用户</p><pre class="line-numbers language-none"><code class="language-none">chown -R git post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.给到一个读写的最高权限</p><pre class="line-numbers language-none"><code class="language-none">chmod 777 post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_21.png"></p><p>5.回到git目录下，给仓库同样的操作</p><pre class="line-numbers language-none"><code class="language-none">cd /home/gitchmod 777 blog.git/chown -R git blog.git/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_22.png"></p><p>6.被同步的目录也需要授予最高权限和git用户</p><pre class="line-numbers language-none"><code class="language-none">cd /usr/local/nginxchmod 777 html/chown -R git html/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_23.png"></p><h3 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h3><p>打开hexo的主配置文件，添加deploy仓库</p><pre class="line-numbers language-none"><code class="language-none">type: gitrepo: git@服务器IP地址:/home/git/blog.gitbranch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_24.png"></p><h3 id="同步到服务器"><a href="#同步到服务器" class="headerlink" title="同步到服务器"></a>同步到服务器</h3><p>在本地blog文件夹下Git Bash Here，执行以下命令</p><pre class="line-numbers language-none"><code class="language-none">hexo cleanhexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>完成后，输入服务器的IP地址就可以访问到网站了。  </p><p>可以检查下服务器上是否有我们的博客文件</p><pre class="line-numbers language-none"><code class="language-none">cd /usr/local/nginx/htmlls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>检查无误就大功告成了。</p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>这一步是让我的域名绑定服务器，绑定之后就能以域名访问网站了。这一步很简单，只需要添加域名解析就行。  </p><p><strong>这里添加两个记录：www和@，记录值都是服务器的IP地址</strong><br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_25.png" alt="域名解析" title="域名解析"></p><h2 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h2><blockquote><p>SSL 证书就是遵守 SSL 安全套接层协议的服务器数字证书。而 SSL 安全协议最初是由美国网景 Netscape Communication 公司设计开发的,全称为:安全套接层协议 (Secure Sockets Layer) , 它指定了在应用程序协议(如 HTTP、Telnet、FTP)和 TCP/IP 之间提供数据安全性 分层的机制,它是在传输通信协议(TCP/IP)上实现的一种安全协议,采用公开密钥技术,它为 TCP/IP 连接提供数据加密、服务器认证、消息完整性以及可选的客户机认证。由于此协议很好地解决了互联网明文传输的不安全问题,很快得到了业界的支持,并已经成为国际标准。SSL 证书由浏览器中“受信任的根证书颁发机构”在验证服务器身份后颁发,实现网站身份验证和加密传输功能。</p></blockquote><p>装载SSL证书产品后自动激活浏览器中显示“锁”型安全标志，地址栏以“https”开头。</p><h3 id="获取SSL证书"><a href="#获取SSL证书" class="headerlink" title="获取SSL证书"></a>获取SSL证书</h3><p>获取的方式挺多，可以购买，也可以免费获取，我的证书是领的阿里云免费给的20张证书。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_26.png" alt="免费的SSL证书" title="免费的SSL证书"></p><h3 id="下载SSL证书"><a href="#下载SSL证书" class="headerlink" title="下载SSL证书"></a>下载SSL证书</h3><p>点击证书栏右侧“下载”，找到服务器类型Nginx下载。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_27.png" alt="下载SSL证书" title="下载SSL证书"></p><h3 id="传输到服务器"><a href="#传输到服务器" class="headerlink" title="传输到服务器"></a>传输到服务器</h3><p>下载后的证书是一个压缩包，解压后会有两个文件：**.key和.pem**  </p><p>这里可以解压后传输到服务器，也可以把压缩包直接传输到服务器，但是需要在服务器上解压，所以服务器需要安装ZIP解压软件。这里我选择先解压再传输到服务器。  </p><p>安装unzip</p><pre class="line-numbers language-none"><code class="language-none">yum install unzip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.在Nginx根目录下conf文件夹下创建存放证书的目录cert</p><pre class="line-numbers language-none"><code class="language-none">cd /usr/local/nginx/confmkdir cert<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里我选择先解压再传输到服务器。</p><p>2.在ECS控制台发送.key和.pem文件，目标路径为</p><pre class="line-numbers language-none"><code class="language-none">/usr/local/nginx/conf/cert/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_29.png"></p><p>上传成功后，进入cert文件夹可以看到存在这两个文件了<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_30.png"></p><h3 id="修改-server"><a href="#修改-server" class="headerlink" title="修改 server"></a>修改 server</h3><p>1..返回conf文件夹编辑Nginx配置文件nginx.conf，修改与证书相关的配置，目的是打开443端口。</p><pre class="line-numbers language-none"><code class="language-none">vim nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_28.png"></p><p>2.找到HTTPS server，<strong>将其内容解注释并修改</strong>。  </p><p>以下步骤含错误示范，还请读者不要着急模仿，可以先去下面看一眼“<strong>重启失败解决方案</strong>”的内容，方便之后一步到位。  </p><p>当然也可以跟着我的步骤来，之后修改错误。</p><p>原来的HTTPS server内容</p><pre class="line-numbers language-none"><code class="language-none"># HTTPS server## server {#     listen       443 ssl;#     server_name  localhost;#     ssl_certificate      cert.pem;#     ssl_certificate_key  cert.key;#     ssl_session_cache    shared:SSL:1m;#     ssl_session_timeout  5m;#     ssl_ciphers HIGH:!aNULL:!MD5;#     ssl_prefer_server_ciphers  on;#     location / {#         root   html;#         index  index.html index.htm;#     }#}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的HTTPS server</p><pre class="line-numbers language-none"><code class="language-none">HTTPS server   server {    #HTTPS的默认访问端口为443    #如果未在此处配置HTTPS的默认访问端口，可能会造成Nginx无法启动    #如果使用Nginx 1.15.0及以上版本，请使用listen 443 ssl 代替listen 443和ssl on    listen       443 ssl;    #填写证书绑定的域名    server_name  www.invictusqiu.com;    root html;    index index.html index.htm;    #填写证书文件名称    ssl_certificate      cert/9575407_www.invictusqiu.com.pem;    ssl_certificate_key  cert/9575407_www.invictusqiu.com.key;    ssl_session_timeout  5m;    #表示使用的加密套件的类型    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    #表示使用的TLS协议的类型，需要自行评估是否配置TLSv1.1协议    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;    ssl_prefer_server_ciphers  on;    location / {    #Web网站程序存放目录        root   html;        index  index.html index.htm;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.修改80端口server的内容</p><p>原来80端口的server</p><pre class="line-numbers language-none"><code class="language-none">server {    listen       80;    server_name  localhost;    #charset koi8-r;    #access_log  logs/host.access.log  main;    location / {        root   html;        index  index.html index.htm;    }    #error_page  404              /404.html;    # redirect server error pages to the static page /50x.html    #    error_page   500 502 503 504  /50x.html;    location = /50x.html {        root   html;    }    #后面内容可忽略}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的80端口server</p><pre class="line-numbers language-none"><code class="language-none">server {    listen       80;    #填写证书绑定的域名    server_name  www.invictusqiu.com;    #将所有HTTP请求通过rewrite指令重定向到HTTPS。    rewrite ^(.*)$ https://$host$1;    #charset koi8-r;    #access_log  logs/host.access.log  main;    location / {        index  index.html index.htm;    }    #error_page  404              /404.html;    # redirect server error pages to the static page /50x.html    #    error_page   500 502 503 504  /50x.html;    location = /50x.html {        root   html;    }    #后面内容可忽略}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器界面展示：<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_31.png" alt="443端口原来的server" title="443端口原来的server"><br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_32.png" alt="443端口现在的server" title="443端口现在的server"><br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_33.png" alt="80端口原来的server" title="80端口原来的server"><br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_34.png" alt="80端口现在的server" title="80端口现在的server"></p><p><strong>修改完成后保存退出</strong></p><h3 id="重启Nginx服务"><a href="#重启Nginx服务" class="headerlink" title="重启Nginx服务"></a>重启Nginx服务</h3><p>来到nginx的sbin目录执行重启命令</p><pre class="line-numbers language-none"><code class="language-none">cd /usr/local/nginx/sbin./nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>发现报错：<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_35.png" alt="重启错误" title="重启错误"></p><h3 id="重启失败解决方案"><a href="#重启失败解决方案" class="headerlink" title="重启失败解决方案"></a>重启失败解决方案</h3><p>好的，不论是跳转来这一步的朋友，还是跟着我步骤的朋友，<strong>现在看一看nginx.conf文件443端口那里的HTTPS server是不是注释掉的。</strong></p><p>也就是如下</p><pre class="line-numbers language-none"><code class="language-none"># HTTPS server server {     listen       443 ssl;     server_name  localhost;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>还没修改server的朋友请注意不要将HTTPS server解注释。</strong>  </p><p><strong>已经跟着我走的朋友请回去将其注释掉</strong>。  </p><p>之后再次重启Nginx服务就成功了。</p><h3 id="重启失败解决方案第二版"><a href="#重启失败解决方案第二版" class="headerlink" title="重启失败解决方案第二版"></a>重启失败解决方案第二版</h3><p>为什么有第二版解决方案呢，这版解决方案是针对：<br><strong>由于我们未装SSL模块，启动时，会提示nginx:[emerg]unknown directive ssl错误</strong>  </p><p>因为我是先遇到第一版错误，不知道错哪了，查资料时干脆把这一版的解决方案先做了，到最后发现我并未存在此版错误，但我认为还是有必要提一下的。  </p><p><strong>如果未做该版解决方案的朋友你跟着我前面的步骤很顺利的重启了，那么你可以跳过此小节到“放行443端口”。</strong>  </p><p>好的，让我们看看这一错误该怎么解决。</p><p>先执行<code>cd ~</code>  </p><p>1.检查你是否安装了ssl模块</p><pre class="line-numbers language-none"><code class="language-none">cd /usr/local/nginx./sbin/nginx -V<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如下图所示显示已经安装ssl模块则证明你不存在此版错误。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_36.png" alt="存在ssl模块" title="存在ssl模块"></p><p>2.如果没有ssl模块，我们先来到Nginx的解压目录，跟着我的步骤走的朋友路径如下，其他的朋友可能你的解压目录在/usr/local/nginx-1.20.2</p><pre class="line-numbers language-none"><code class="language-none">cd ~cd /root/nginx-1.20.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_37.png"></p><p>3.添加ssl模块</p><pre class="line-numbers language-none"><code class="language-none">./configure --with-http_ssl_module<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.执行make命令，编译安装包</p><pre class="line-numbers language-none"><code class="language-none">make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.查看objs文件夹下有一个nginx文件，这个就是新版程序，然后备份下之前的nginx</p><pre class="line-numbers language-none"><code class="language-none">cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.把编译好的nginx文件替换之前的</p><pre class="line-numbers language-none"><code class="language-none">cp objs/nginx /usr/local/nginx/sbin/nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果无法替换，显示<br><code>cannot create regular file '/usr/local/nginx/sbin/nginx': Text file busy</code></p><p>执行以下命令查看nginx进程</p><pre class="line-numbers language-none"><code class="language-none">ps -ef | grep nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现正在运行</p><p>查看进程号，执行以下命令关闭nginx进程</p><pre class="line-numbers language-none"><code class="language-none">kill -QUIT 4809<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次查看nginx进程，可以看到已经关闭，之后再次执行上面的替换命令，就能成功替换了。</p><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_38.png"></p><p>7.最后查看下是否安装成功了</p><pre class="line-numbers language-none"><code class="language-none">cd /usr/local/nginx./sbin/nginx -V<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>显示有ssl模块，那么就证明我们安装成功了，之后就能正常重启nginx了。</p><h3 id="放行443端口"><a href="#放行443端口" class="headerlink" title="放行443端口"></a>放行443端口</h3><p>1.执行以下命令查看443端口是否在运行</p><pre class="line-numbers language-none"><code class="language-none">netstat -nplt lgrep 443<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到正在运行<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_39.png" alt="443端口正常运行" title="443端口正常运行"></p><p>2.添加防火墙端口</p><p>查看防火墙运行状态</p><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --state<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示<code>running</code>，则进入下一步。</p><p>查看开放的端口</p><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --list-ports<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现没有443端口。</p><p>添加443端口</p><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --zone=public --add-port=443/tcp --permanent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示<code>success</code></p><p>3.重新加载防火墙</p><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示<code>success</code></p><p>再次查看开放的端口</p><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --list-ports<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到存在443端口。</p><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_40.png" alt="添加防火墙端口" title="添加防火墙端口"></p><p>4.检查本地443端口加载的HTTPS服务以及证书是否正常，域名名称为你自己的域名</p><pre class="line-numbers language-none"><code class="language-none">echo | openssl s_client -connect 127.0.0.1:443 -servername invictusqiu.com 2&gt;/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果出现<code>SSL-Session</code>表示HTTPS服务正常运行。</p><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_41.png" alt="SSL-Session" title="SSL-Session"></p><p>5.进入ECS安全组策略<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_42.png" alt="进入ECS安全组策略" title="进入ECS安全组策略"></p><p>放行TCP协议443端口的入方向请求<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_43.png" alt="放行443端口" title="放行443端口"></p><p>6.执行curl命令，查询服务器响应header信息</p><pre class="line-numbers language-none"><code class="language-none">curl -l https://invictusqiu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果显示HTTPS请求可以正常响应。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_44.png" alt="响应header信息" title="响应header信息"></p><p><strong>至此所有工作都完成了！</strong></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>此番部署工作可谓是困难重重，在此途中卡了好多次，甚至一个重启nginx的问题都解决了好久，关于我是怎么知道HTTPS server需要注释掉的呢？在网上翻来覆去搞了半天，看到这个视频：<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/DeployBlog_45.png"></p><p>哈哈哈，找个错误CPU都干烧了，结果是这种错误。<br>这种 Error 可谓是读计算机专业家常便饭的事了。  </p><p>最后分享一件事作为本篇文章的结尾：<br>  我一直很钦佩纯粹的人，特别是以具体的目光投射到他身上时也依然纯粹的人，但这样的人只是我心目中的理想化，我也只是追寻着“这类不存在的人”的脚步前进罢了。几天前跟朋友聊天，聊到了跟几年前的自己做对比。假如需要你去做一件短时间内几乎不可能完成的事，以至于需要“燃尽”自己，你还会去做吗？我不可否认，在塑造世界观的那个年纪，现实、电影、小说、电子游戏等都或多或少影响到过我的世界观。<br>  在几年前如果你问我这个问题，我的回答甚至偏向于“会”，但是现在我想还是算了罢，我想这就是现在的自己和几年前自己一个最大的对比。<br>  我并不是否认“会”这个选项，只是它<strong>现在</strong>不是最优解了。所以我为什么钦佩纯粹的人，是因为他们从不会因为“时态”而去改变自身的选择，这也是我为什么仅仅只是追随他们而不是成为他们的原因吧。  </p><blockquote><p>本章一句：<br>以我残躯化烈火。—— Cyberpunk 2077 隐藏结局</p></blockquote><h3 id="我们下期文章再见！"><a href="#我们下期文章再见！" class="headerlink" title="我们下期文章再见！"></a>我们下期文章再见！</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;这次的网站部署工作还挺不容易的，是一次非常新奇的尝试，从此刻执笔写下这篇文章开始，我已经意识到这将是一个漫长的过程，也说明本篇的内容很长，对</summary>
      
    
    
    
    <category term="Hexo" scheme="http://invictusqiu.com/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://invictusqiu.com/tags/Hexo/"/>
    
    <category term="Git" scheme="http://invictusqiu.com/tags/Git/"/>
    
    <category term="Nginx" scheme="http://invictusqiu.com/tags/Nginx/"/>
    
    <category term="云服务器" scheme="http://invictusqiu.com/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>中国大学生计算机设计大赛作品——电荷：正正子与负负美</title>
    <link href="http://invictusqiu.com/2023/03/18/ElectricCharge-zhengfumei/"/>
    <id>http://invictusqiu.com/2023/03/18/ElectricCharge-zhengfumei/</id>
    <published>2023-03-18T14:52:54.000Z</published>
    <updated>2024-09-21T08:19:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>  本篇文章着重于记录我参加中国大学生计算机设计大赛的经历和作品创作过程。<br>  《电荷：正正子与负负美》是我在大一时设计的微课作品，在我心中它值得写上一笔，文章内容包括创作它时的设计思路和实现方法，以及我的参赛历程。<br>  《电荷：正正子与负负美》不算是一款成功的参赛作品，制作人也就是我也没有专业的微课制作水准，想要从此处取经的朋友还请海涵。<br>  于我而言，本篇文章更重要的作用是用于勉励自己，“历历浮生，无非败而后成。”</p><blockquote><p>有关于中国大学生计算机设计大赛的介绍就不在此处赘述了，想要参赛的朋友还请自行去官网了解参赛时间和参赛项目及要求，本篇文章的作品类别属于微课类。<br><a href="http://jsjds.blcu.edu.cn/">中国大学生计算机设计大赛官网</a></p></blockquote><h2 id="作品设计思路"><a href="#作品设计思路" class="headerlink" title="作品设计思路"></a>作品设计思路</h2><h3 id="确定微课主题"><a href="#确定微课主题" class="headerlink" title="确定微课主题"></a>确定微课主题</h3><p>微课是什么？简而言之就是在短时间内能够将知识点讲授清楚的视频。</p><p>当初想要参赛的我，首先思考的就是课题。<strong>什么样的课题是我已经学过且掌握的，该知识点是否适合制作成微课，这个课题是否新颖，是否有利于故事创作。</strong></p><p>以微课的定义出发，我认为一部好的微课，它要做到<strong>能够将晦涩难懂的知识清清楚楚而且生动形象地讲授出来。</strong>  </p><p>因为我高中比较擅长物理，当我快速地回顾了高中物理3-1课本的内容时，我脑海中闪现出了正负电荷的具体形象，而且正负电荷之间的关系很奇妙，我应该可以试试……  </p><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/charges.png" alt="正负电荷" title="正负电荷">  </p><p>也因此我确定下了微课的主题：<strong>正负电荷</strong></p><h3 id="编写一则故事"><a href="#编写一则故事" class="headerlink" title="编写一则故事"></a>编写一则故事</h3><p>其实微课作品不一定需要生动的故事内容来支撑，但假如你能做到为该知识点编写故事，就能够使枯燥的知识变得有趣起来，因为我不擅长制作动画，所以有一则新颖的故事是非常有必要的。  </p><ul><li>人物：灵感来源于动画《pop子和pipi美的日常》，感觉挺顺口的，所以我将它们命名为“正正子”和“负负美”</li><li>关系：挚友</li><li>时间：过去</li><li>地点：地球</li><li>内容：以上帝视角的方式讲述正正子和负负美的历史和关系</li></ul><p>故事可以追溯到电荷的历史起源，将正负电荷拟人化，并赋予感情，与我们人类的情感产生共鸣，将库仑力比喻为人类之间的思念之情。  </p><p>具体的故事内容就不在此展开描述了，后面我会给出设计与开发文档的链接。</p><h2 id="作品实现方法"><a href="#作品实现方法" class="headerlink" title="作品实现方法"></a>作品实现方法</h2><h3 id="角色设计"><a href="#角色设计" class="headerlink" title="角色设计"></a>角色设计</h3><p>参考了《pop子和pipi美的日常生活》，哈哈，画风简单粗暴，对于人物的创作我是零基础的，在此也没什么可讲的。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/ZhengFu.png" alt="正正子和负负美" title="正正子和负负美"></p><h3 id="素材收集"><a href="#素材收集" class="headerlink" title="素材收集"></a>素材收集</h3><p>现在网上如此之多的素材资源，只要肯找都是有的。因为我的作品是属于简约风格，所以没有下很多功夫去网上收集素材，收集的仅仅是一些名人的图片和实物图。  </p><p>另外的一些图片我是从 <a href="https://www.islide.cc/">iSlide</a> 上拿来的，当时我是开通了一个会员，节省了我很多收集素材的时间。  </p><h3 id="撰写说课稿"><a href="#撰写说课稿" class="headerlink" title="撰写说课稿"></a>撰写说课稿</h3><p>要演出故事，首先得有剧本，说课稿就是剧本，写好了剧本，才能有条不紊的进行整个故事的创作。将想好的故事写进说课稿，然后照着读上几遍，控制好节奏和时间，因为这基本奠定了之后微课的时长。  </p><p><strong>我推荐比赛的微课时长在6-8分钟之间，比赛有答辩环节，10分钟以内你得把作品进行展示和解说，所以控制好作品的时长很重要，必须腾出足够的时间解说。</strong></p><h3 id="动画制作"><a href="#动画制作" class="headerlink" title="动画制作"></a>动画制作</h3><p>这是最为核心的环节，微课动画制作方法多种多样，我知道的有 Flash，After Effects，还有一些本身就是为微课而生的软件比如Focusky。  </p><p>然而在制作过程中以上软件我都没用，我用的只是 PowerPonit，也就是 PPT,在固有观念里 PPT 就是做课件用的，但其实它是实实在在的动画制作软件，而缺点是制作起来较为繁杂。  </p><p>学习其他软件，我要考虑时间成本，PPT 动画我需要学的仅仅是在原来的基础上进行进阶，因此我在B站上看了许多 PPT 动画视频，从中进行学习。  </p><p><strong>PPT制作动画需要的不是高技术含量，是耐心，一张 PPT 多则可高达上百张动画，需要一步一步来组合。将文字在脑海中转换成图像，再用双手创作出来，动画制作就这么个过程。</strong></p><h3 id="视频制作"><a href="#视频制作" class="headerlink" title="视频制作"></a>视频制作</h3><p>那我们仅仅做好动画是不行的，我们还需要拍摄成视频，进行配乐和配音，以及添加字幕，等一系列后期处理。  </p><p>PPT 做的动画做成视频很简单，你可以直接以视频的方式导出。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/pptMovie1.png" alt="PPT导出视频" title="PPT导出视频">  </p><p>或者用录频软件录制一遍 PPT 的动画播放。<br>录频软件：N卡自带的录屏功能，OBS Studio，Bandicam(付费)等。  </p><p>录好视频后，进行配乐和配音，我当时用的是 Premiere，pr的话可能需要花些时间去学习如何使用，现在的话我知道的剪映也是不错的，易上手。  </p><p>配音的话简单粗暴，手机的录音功能加耳机就行，我当时是一句一句配的，这样不满意的话方便重新配。  </p><p>配完的音频文件导入pr中，和视频进行结合就大功告成了，《电荷：正正子与负负美》的配音全程都是由我一人配的，当然如果要进一步提升竞争力我还是建议找专业的配音来吧。  </p><p>挑选配乐的话，怎样合适怎样来，这范围就太大了。我当时挑选的是iPhone 5 广告Photos Every Day中的BGM—Rob Simonsen Blue</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>制作微课不需要高技术含量，制作一部微课，并且要用来参加竞赛的话，重要的是一定要记得<strong>创新</strong>，如果在此基础上你能设计出漂亮的动画和其他视觉、听觉上的体验那肯定是大大的加分项。  </p><p><strong>虽然没在文章中说有关参赛文档的事，但如果是想要参赛的朋友一定要认认真真填写所有参赛文档，后期答辩时评委会仔细看和提问的，尤其是国赛的评委。</strong></p><p><strong>如果是打算提取干货的朋友看到这里就可以离开了，后面的内容对你的帮助不大。</strong></p><h2 id="作品链接"><a href="#作品链接" class="headerlink" title="作品链接"></a>作品链接</h2><blockquote><p>链接：<a href="https://pan.baidu.com/s/1QGm5GTxQxeMLMfO5QWZ8ng?pwd=star">https://pan.baidu.com/s/1QGm5GTxQxeMLMfO5QWZ8ng?pwd=star</a><br>提取码：star </p></blockquote><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/yimeifasha.jpg"><br>我们下期文章再见。</p><h2 id="参赛历程"><a href="#参赛历程" class="headerlink" title="参赛历程"></a>参赛历程</h2><p><strong>打算提取干货的朋友看到这里就可以离开了，后面的内容对你帮助不大</strong>。  </p><p>既然是我的个人blog，我当然有必要记录下自己当时参赛的历程。  </p><h3 id="报名"><a href="#报名" class="headerlink" title="报名"></a>报名</h3><p>  当时刚进入大学，对一切都是那么好奇，感觉自己想做的事有很多，感觉自己目标很清晰，很有干劲呢。头一次听到计算机设计大赛是在一次学科讲座上听老师和学姐分享的，当时很有精神啊，还和学姐积极互动，那时候就想我应该也可以做一个参赛作品出来吧，听说可以出省去其他学校比赛呢，这对于一个入学就被封锁的学生来说太有吸引力了。<br>  到下学期时，报名开始，那肯定得报嘛，约上我两个舍友然后就报上了。难的是后面怎么做呢？我看了一些优秀的获奖作品，想从中取经，当时看了的感觉就是：哇这做的太好了，没点专业知识恐怕做不出来。那时候我们所有人都打退堂鼓，后来我提出做高中物理的电荷，这个题材比较好做，后面我们讨论了下，确定下来。<br>  后面就由我创作了整个故事情节，但是难点又来了，怎么做动画，我们都尝试做了，但是效果不尽人意。我就硬照着B站上那些好看的PPT动画去做，花了很大功夫，后来成功了，当我做出开头时，我感觉我还是可以的。</p><h3 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h3><p>  我做了两天，然后就放五一假期，当时我和舍友都回家了，那作品可能真就放弃了。回家后的两天抽空做了做，把开头做好，完成了30％，后面两天，花了大部分精力去做，尤其是第四天直接做到了凌晨5点。我当时就感觉灵感很充足，脑子中一幅幅画面涌现出来，效率特别高，毫无困意，那一天晚上直接就把动画全部做完了。<br>  最后一天我在家弄好视频，回到学校弄好配音，然后就贴着时间点上交了。没想过拿奖，当时就没想要拿奖，可能一切都是徒劳，但是自己想做，想把这个故事写出来，画面呈现出来。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/ZhengFuCover.png"></p><h3 id="校级赛"><a href="#校级赛" class="headerlink" title="校级赛"></a>校级赛</h3><p>  当时校级赛也需要答辩，第一次答辩我还是蛮紧张的，答辩当天，发现周围的参赛选手都做了答辩PPT，而我没做，当时心情就是崩了，答辩时我就放了一下作品，然后用作品本来的PPT做了介绍，当时觉得应该是没戏了，后面也没多想了，至少能锻炼一下自己的答辩能力……</p><h3 id="获奖"><a href="#获奖" class="headerlink" title="获奖"></a>获奖</h3><p>  校级赛公布结果的那一天，我在上PS课，当时点开一看是一等奖！差点在课上笑出声，瞬间感觉自己所有的付出都值了，后来作品被交付给省上初评顺利通过了，拿到了省赛现场资格，只要拿到了省赛现场资格就意味着进入了国赛。</p><h3 id="省赛"><a href="#省赛" class="headerlink" title="省赛"></a>省赛</h3><p>  省赛定在云南工商学院，没错，是线下赛，为期三天。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/gongshangxueyuan.jpg" alt="云南工商学院" title="云南工商学院"><br>  第一天从学校出发，乘坐高铁到达了昆明市杨林大学城，入住了官方指定的酒店，然后去领取选手证和官方T恤，顺便抽了签。答辩是分组的，和我同行的两组学长学姐我们分到了不同组，但我们手气出奇一致，在组内把第1都包了，所以当天会很快答完辩，然后就可以在杨林耍一天啦。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/xianchang.jpg" alt="参赛物品" title="参赛物品"><br>  第二天现场答辩，为什么我会强调一定要控制好微课时长，因为他只给10分钟的答辩时间，而正正子与负负美长达9分10秒，因此我必须在50秒内把作品介绍完，但可能吗？太难了，但这也没办法，那天答辩勉勉强强，紧张还是紧张，只能说自己的现场能力锻炼的还不够。评委老师问的问题主要是：应用了什么软件和技术，并且会挑出几张画面进行提问，然后给出一些建议。<br>  第三天是领奖日，举行颁奖仪式，现场能看到云南省很厉害的计算机老师，当我看到C语言网课的普运伟老师时感觉挺奇妙的，有意义的是可以现场看到那些优秀作品展示，同行学长的数媒动画作品被评为了优秀作品，真的很厉害，我拿到了省级二等奖也算心满意足了。</p><h3 id="国赛"><a href="#国赛" class="headerlink" title="国赛"></a>国赛</h3><p>  因为疫情原因，很遗憾无法去线下参赛，本来想着能去阜阳师范大学见见世面，长长见识的，后来官方将国赛改为了线上比赛。其实我就只是想感受比赛现场的氛围，享受比赛，无法线下比赛是比较遗憾的，不过现场的话省赛也体验过了嘛，只不过我更期待国赛的现场。<br>  国赛答辩是采用腾讯会议答辩，流程都是一样的，放作品介绍作品，回答评委老师的问题。评委老师是会认真去看你写的设计和教学文档的，让我比较在意的是我教学设计文档内容写崩了，只怪我当时没好好检查文档内容，没有做到完美，小小的遗憾吧。最终国赛获得三等奖，能走到国赛在我当时看来是不敢想的，感觉一切都值了。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/rongyuqiang.jpg" alt="电荷：正正子与负负美" title="电荷：正正子与负负美"></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>其实写到这不知该怎样结尾了，前段时间陪伴了我6年的游戏《崩坏3》第一部完结了，在游戏制作组的纪录片中，编剧烧鸡老师在最后说的话令我印象深刻：  </p><blockquote><p>今天的自己有没有变得比昨天更好，明天的自己会不会变得比今天更好，就像我今天坐在这里，在镜头前讲下这个故事，它只是一个普普通通的，随处可见的故事，总有一天，每个人会和这个故事告别，走向不同的方向，独属于你自己的下一页，但是那样就好，累了的话就停下脚步，怀念的话就回来看看，这个故事也一直都在，且行且看，尽力而为，不要害怕，不要后悔，就像《崩坏3》的slogan“为世界上所有的美好而战”一样，我们每个人都是在哭声中来到这个世界，但是却要笑着走向未来。</p></blockquote><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/xinlingbushou.jpg" alt="《心灵捕手》台词" title="《心灵捕手》台词"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;  本篇文章着重于记录我参加中国大学生计算机设计大赛的经历和作品创作过程。&lt;br&gt;  《电荷：正正子与负负美》是我在大一时设计的微课作品，在</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C语言课程设计-校园导游系统</title>
    <link href="http://invictusqiu.com/2023/01/16/CampusGuideSystem/"/>
    <id>http://invictusqiu.com/2023/01/16/CampusGuideSystem/</id>
    <published>2023-01-16T07:45:38.000Z</published>
    <updated>2024-09-21T08:19:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>  本篇文章的目的是记录下我设计并实现《 C 校园导游系统》的过程，其实我本来想要把这个系统做的很好，但是奈何本学期出现了一些突发事件，导致时间精力都很有限，所以只能暂时搁置了。<br>  选择这个项目的初心是为了锻炼自己，但最终我在它身上只花费了3天时间，作为达到数据结构课程设计的要求它是完全满足的，但是对我而言离我想象中的要求还差得远，就像它只是一个游戏demo，并不是成品。<br>  那为什么我还要拿出来做文章呢？我能力有限无法真正完成它，大概率以后也没时间去做它了，但是记录下万一哪天用上了呢，当然也可以给后辈一个参考价值吧。<br>  不多说了，现在进入正题吧。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li><p>提供直观的学校地图界面供用户进行查看，以点作为景点，以边作为道路；  </p></li><li><p>提供景点相关信息查询功能，能够查询景点位置和输出景点的相关信息；  </p></li><li><p>提供问路查询功能，用户只需输入起点和终点，系统就会为用户提供最短路径；  </p></li><li><p>提供景点类型查询功能，用户可查询相关类型建筑及其信息； </p></li><li><p><strong>总结：《校园导游咨询系统》需要为用户提供一个可视化的校园平面图，并且提供景点查询功能和最短路径查询功能，满足用户的对校园导游系统的基本需求。</strong></p></li></ul><h2 id="设计过程"><a href="#设计过程" class="headerlink" title="设计过程"></a>设计过程</h2><h3 id="地图设计"><a href="#地图设计" class="headerlink" title="地图设计"></a>地图设计</h3><p>要制作导游系统，首先就是明确我们的导游范围，为了明确如何画出地图，我查看了我们学校的地图。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/yxnumap.png" alt="玉溪师范学院地图" title="玉溪师范学院地图"><br>然后根据地图筛选出了15个景点建筑加入到了这次的系统地图中。<br>将15个地点抽象出来构成图结构<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/map1.png"></p><blockquote><p>1.东北门 2.大学生活动中心 3.实训大楼A 4.滋味苑 5.龙马公寓 6.后山 7.学生宿舍F,G幢 8.学生宿舍K,L,M,N幢 9.主教学区 10.品味苑 11.艺术综合楼 12.图书馆 13.运动场 14.东南门 15.传习馆</p></blockquote><p>OK,就这样一份地图模板就制作好了，也可以说图结构的顶点确定好了，那么接下来就是确定边权值。<br>测量边权值的方法，我这里我采用高德地图的测距小工具，几分钟就全部测量好了，将测量好的数据保存起来，之后用得到。  </p><p>接下来就将地图写入到系统中，就纯靠 printf 画图了<br>现在我们的地图模块就设计好了。但是现在只是一个没有任何信息的图，之后还将导入景点编号、景点信息、边权值。</p><h3 id="创建数据结构并初始化"><a href="#创建数据结构并初始化" class="headerlink" title="创建数据结构并初始化"></a>创建数据结构并初始化</h3><p>将我们测量好的数据保存于相应的.txt文件中，这里我将景点编号保存在<strong>Number.txt</strong>文件，景点名称保存在<strong>Name.txt</strong>文件，景点信息保存在<strong>info.txt</strong>文件，各两点间的距离（边权值）保存在<strong>Distance.txt</strong>文件。  </p><p>然后创建我们所需的数据结构</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define N 15//顶点数目值#define M 22//边数目值#define VexType string//顶点数据类型#define EdgeType int//边数据类型#define INF 0x3f3f3f3f//作为最大值//景点数据结构typedef struct Spot{int number;char name[20];char SpotInfo[50];}Spot;//图的数据结构typedef struct Graph{VexType V[N];//顶点表EdgeType E[N][N];//边表int vnum, ednum;//顶点数、边数}Graph;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">//初始化图的顶点表，邻接矩阵等void InitGraph(Graph&amp; G){//初始化边表for (int i = 0; i &lt; N; i++) {for (int j = 0; j &lt; N; j++) {G.E[i][j] = INF;}}G.ednum = G.vnum = 0;//初始化顶点数、边数}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入顶点和边</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">//插入点函数，改变顶点表void InsertNode(Graph&amp; G, VexType v){if (G.vnum &lt; N){G.V[G.vnum++] = v;}}//插入边函数，改变邻接矩阵void InsertEdge(Graph&amp; G, VexType v, VexType w, int weight){int p1, p2;p1 = p2 = -1;for (int i = 0; i &lt; G.vnum; i++){if (G.V[i] == v)p1 = i;if (G.V[i] == w)p2 = i;}if (p1 != -1 &amp;&amp; p2 != -1){G.E[p1][p2] = G.E[p2][p1] = weight;//无向图邻接矩阵对称G.ednum++;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建图，读取文件导入数据</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">//创建图功能实现函数void CreatGraph(Graph&amp; G){int vn, an;//顶点数，边数vn = N;an = M;int count = 0;char str1[20], str2[20];string s1, s2;int temp = 0;FILE* fp1 = fopen("Number.txt", "r");FILE* fp2 = fopen("Distance.txt", "r");if (fp1 == NULL &amp;&amp; fp2 == NULL){printf("打开文件失败！\n");exit(0);}//从文件中读取景点编号for (int i = 0; i &lt; N; i++){count = fscanf(fp1, "%s", str1);if (count == -1)exit(0);s1 = str1;InsertNode(G, s1);}//从文件中读取所有边的权值for (int i = 0; i &lt; M; i++){count = fscanf(fp2, "%s %s %d", str1, str2, &amp;temp);if (count == -1)exit(0);s1 = str1;s2 = str2;InsertEdge(G, s1, s2, temp);}fclose(fp1);fclose(fp2);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>到这里我们的图就创建完成了</strong></p><h3 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h3><p>无论是在教材还是各类算法书籍中都少不了的最短路径算法Dijkstra算法，是由荷兰计算机科学家 Edsger Wybe Dijkstra 在1956年发现的算法，戴克斯特拉算法使用类似广度优先搜索的方法解决赋权图的单源最短路径问题。Dijkstra 算法原始版本仅适用于找到两个顶点之间的最短路径，后来更常见的变体固定了一个顶点作为源结点然后找到该顶点到图中所有其它结点的最短路径，产生一个最短路径树。本算法每次取出未访问结点中距离最小的，用该结点更新其他结点的距离。  </p><blockquote><p>核心思想：按路径长度递增次序产生算法，将图数据结构分为顶点集V和边集E，接下来初始化图的顶点表和邻接矩阵，将所有边的权值设置为无穷大，然后插入点改变顶点表，插入边改变邻接矩阵。之后从第一个顶点开始计算最短路径，假如该顶点与其他顶点有边连接，则将其边权值加入到最短路径集，然后依次比较，最后选出最小的边权值，并记录前驱，然后从前驱开始又执行边权值的比较，直到最后到达终点结束，最短路径值即之前记录过的前驱的边权值相加的最终结果。</p></blockquote><p>这样讲还是难懂，那我们从头开始了解Dijkstra算法吧</p><p>下面以该图为例讲解Dijkstra算法寻找最短路径的过程<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/Dijkstra2.png"><br>以A为起始点，求A到BCDEF的最短路径  </p><p>要求A到其他5个点的最短距离，我们构造一个数组记录A到BCDEF5个点的路径距离。  </p><p>需要注意的是</p><ul><li>如果A能够直接到达节点，则使用路径长度，即边权值作为其距离。</li><li>如果A节点不能够直接到达节点则用无穷大表示A到该点的距离。</li><li>任何点到自身的距离都为0  </li></ul><p>在最开始A到其余点的数组如下  </p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>10</td><td>∞</td><td>4</td><td>∞</td><td>∞</td></tr></tbody></table><p>Dijkstra算法的思想是：从以上最短距离数组中每次选择一个最近的点，将其作为下一个点，然后重新计算从起始点经过该点到其他所有点的距离，并更新最短距离的值，已经选取过的点就是确定了最短路径的点，不再参与下一次计算。  </p><p>我们来看看实际的选取过程</p><h4 id="第一次选取"><a href="#第一次选取" class="headerlink" title="第一次选取"></a>第一次选取</h4><p>构建好的数组是这样的  </p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>10</td><td>∞</td><td>4</td><td>∞</td><td>∞</td></tr><tr><td>第一步选取该最短路径数组中值最小的一个点。因为A点到本身不需要参与运算，所以从剩下的点中选择最短的一个是D。</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>第二步以<strong>A-D</strong>的距离为最近距离更新A点到所有点的距离。即相当于A点经过D点，计算A到其他点的距离。</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/Dijkstra3.png"><br>A-A: 0<br>A-B: A-D-B:6<br>A-C: A-D-C:19<br>A-D: A-D:4<br>A-E: A-D-E:10<br>A-F: A-D-F:∞  </p><p>将现在A到各个点的距离和之前相比较，取最小值，更新BCE的距离，得到新的最短距离数组  </p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>6</td><td>19</td><td>4</td><td>10</td><td>∞</td></tr></tbody></table><h4 id="第二次选取"><a href="#第二次选取" class="headerlink" title="第二次选取"></a>第二次选取</h4><p>AD两点已经选取，不再参与下面的计算。  </p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>6</td><td>19</td><td>4</td><td>10</td><td>∞</td></tr></tbody></table><p>以B为最新点，更新最短距离数组<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/Dijkstra4.png"><br>A-A: 0<br>A-B: A-D-B:6<br>A-C: A-D-B-C:14<br>A-D: A-D:4<br>A-E: A-D-B-E:12<br>A-F: A-D-B-F:∞</p><p>对比现在的最短距离和上一个数组的距离，到相同节点选最小的，更新最短距离数组。<br>C点由19更新成14，E点走A-D-E为10，<strong>距离更短所以不更新</strong>，得到如下数组：  </p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>6</td><td>14</td><td>4</td><td>10</td><td>∞</td></tr></tbody></table><h4 id="第三次选取"><a href="#第三次选取" class="headerlink" title="第三次选取"></a>第三次选取</h4><p>第一步：选取除了A B D节点之外的剩余节点中最短节点，为点E<br>第二步：以E点为最新节点，更新最短路径数组<br>因为在上一步中计算达到E点的距离时没有更新距离，A-D-E 为10 最短，所以更新E点到B C F点的距离时走的路径是A-D-E。注意这里的最短距离有对应的路径，选择最小值就是选择最短距离。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/Dijkstra5.png"><br>A-A: 0<br>A-B: A-D-B:6<br>A-C: A-D-E-C:11<br>A-D: A-D:4<br>A-E: A-D-E:10<br>A-F: A-D-E-F:22<br>对比现在的最短距离和上一个数组的距离，到相同节点选最小的，更新最短距离数组。<br>更新C点走A-D-E-C为11，比之前的A-D-B-C 14距离更近，更新到F点距离，得到如下数组：  </p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>6</td><td>11</td><td>4</td><td>10</td><td>22</td></tr></tbody></table><h4 id="第四次选取"><a href="#第四次选取" class="headerlink" title="第四次选取"></a>第四次选取</h4><p>第一步：选取除了A B D E节点之外的剩余节点中最短节点，为点C<br>第二步：以C点为最新节点，更新最短路径数组<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/Dijkstra6.png"><br>A-A: 0<br>A-B: A-D-B:6<br>A-C: A-D-E-C:11<br>A-D: 4<br>A-E: A-D-E:10<br>A-F: A-D-E-C-F:16<br>对比现在的最短距离和上一个数组的距离，到相同节点选最小的，更新最短距离数组。<br>更新到F点距离，可以得到如下数组：  </p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>6</td><td>11</td><td>4</td><td>10</td><td>16</td></tr></tbody></table><h4 id="第五次选取"><a href="#第五次选取" class="headerlink" title="第五次选取"></a>第五次选取</h4><p>第一步：选取除了A B C D E节点之外的剩余节点中最短节点，也就是最后一个节点：F<br>第二步：以F点为最新节点，更新最短路径数组。由于F点是最后一个点，所以也不用更新数组，目前的数组就是所求数组将F点加入最短路径范围中，此时所有的点都加入了最短路径范围，也就是说A点到所有点的距离都找到了。最终得出的距离值为：<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/Dijkstra7.png"><br>最终得到的结果为：  </p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>6</td><td>11</td><td>4</td><td>10</td><td>16</td></tr></tbody></table><h4 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h4><table><thead><tr><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>6</td><td>11</td><td>4</td><td>10</td><td>16</td></tr></tbody></table><p>A-A: 0  </p><p>A-B: A-D-B:6<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/Dijkstra8.png"></p><p>A-C: A-D-E-C:11<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/Dijkstra9.png"></p><p>A-D:4<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/Dijkstra10.png"></p><p>A-E: A-D-E:10<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/Dijkstra11.png"></p><p>A-F: A-D-E-C-F:16<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/Dijkstra12.png"></p><h3 id="代码实现Dijkstra算法"><a href="#代码实现Dijkstra算法" class="headerlink" title="代码实现Dijkstra算法"></a>代码实现Dijkstra算法</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define INF 0x3f3f3f3f//作为最大值//Dijkstra算法全局变量bool S[N];//顶点集int D[N];//到各个顶点的最短路径int Pr[N];//记录前驱void Dijkstra(Graph G, int v){//初始化int n = G.vnum;//n为图的顶点个数for (int i = 0; i &lt; n; i++){S[i] = false;D[i] = G.E[v][i];if (D[i] &lt; INF){Pr[i] = v;//v与i连接，v为前驱}else{Pr[i] = -1;}}S[v] = true;D[v] = 0;//初始化结束，求最短路径，并加入S集for (int i = 1; i &lt; n; i++){int min = INF;int temp;for (int w = 0; w &lt; n; w++){if (!S[w] &amp;&amp; D[w] &lt; min)//某点temp未加入S集，且为当前最短路径{temp = w;min = D[w];}}S[temp] = true;//更新从源点出发至其余点的最短路径 通过tempfor (int w = 0; w &lt; n; w++){if (!S[w] &amp;&amp; D[temp] + G.E[temp][w] &lt; D[w]){D[w] = D[temp] + G.E[temp][w];Pr[w] = temp;}}}}//输出最短路径void Path(Graph G, int v){if (Pr[v] == -1){return;}Path(G, Pr[v]);cout &lt;&lt; G.V[Pr[v]] &lt;&lt; "-&gt;";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导游系统问路查询功能"><a href="#导游系统问路查询功能" class="headerlink" title="导游系统问路查询功能"></a>导游系统问路查询功能</h3><p>在了解以及实现了Dijkstra算法之后，我们还要在程序中调用它。  </p><ul><li>用户只需输入起点和终点，系统就会为用户提供最短路径。  </li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">//调用最短路径-Dijkstra算法void Shortest_Dijkstra(Graph&amp; G){string vname;string vnamed;int v1, v2;char ch = '1';while (true){v1 = -1;v2 = -1;cout &lt;&lt; "请输入起点编号：";cin &gt;&gt; vname;for (int i = 0; i &lt; G.vnum; i++) {if (G.V[i] == vname){v1 = i;}}if (v1 == -1){cout &lt;&lt; "没有找到输入点！" &lt;&lt; endl;system("pause");system("cls");drawMap();continue;}cout &lt;&lt; "请输入终点编号：";cin &gt;&gt; vnamed;for (int i = 0; i &lt; G.vnum; i++) {if (G.V[i] == vnamed){v2 = i;}}if (v2 == -1){cout &lt;&lt; "没有找到终点！" &lt;&lt; endl;system("pause");system("cls");drawMap();continue;}Dijkstra(G, v1);cout &lt;&lt; "\n目标点" &lt;&lt; "\t" &lt;&lt; "最短路径值" &lt;&lt; "\t" &lt;&lt; "最短路径" &lt;&lt; "\t" &lt;&lt; endl;for (int i = 0; i &lt; G.vnum; i++){if (i != v1 &amp;&amp; i == v2){cout &lt;&lt; " " &lt;&lt; G.V[i] &lt;&lt; "\t" &lt;&lt; D[i] &lt;&lt; "米" &lt;&lt; "\t" &lt;&lt; "\t";Path(G, i);cout &lt;&lt; G.V[i] &lt;&lt; endl;}}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果展示:</p><pre class="line-numbers language-none"><code class="language-none">请输入起点编号：1请输入终点编号：5目标点  最短路径值      最短路径 5      400米           1-&gt;2-&gt;4-&gt;5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导游系统信息查询功能"><a href="#导游系统信息查询功能" class="headerlink" title="导游系统信息查询功能"></a>导游系统信息查询功能</h3><p>信息查询功能很简单，把预先准备的景点信息文件读取到程序的景点数据结构中，然后输出它就行了。  </p><p>部分代码展示</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void NameFile(Spot spt[]){int count = 0;int i;FILE* fp = fopen("Name.txt", "r");if (fp == NULL) {printf("打开文件失败！\n");exit(0);}for (i = 0; i &lt; N; i++) {spt[i].number = i + 1;count = fscanf(fp, "%s", spt[i].name);if (count == -1) exit(0);//printf("%s\n", spt[i].name);测试代码}fclose(fp);}void InfoFile(Spot spt[]){int count = 0;int i;FILE* fp = fopen("Info.txt", "r");if (fp == NULL) {printf("打开文件失败！\n");exit(0);}for (i = 0; i &lt; N; i++) {count = fscanf(fp, "%s", spt[i].SpotInfo);if (count == -1)exit(0);//printf("%s\n", spt[i].SpotInfo);测试代码}fclose(fp);}void printInfo(Spot spt[], int i){printf("\n%d.%s\n简介：%s\n", spt[i].number, spt[i].name, spt[i].SpotInfo);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导游系统景点类型查询功能"><a href="#导游系统景点类型查询功能" class="headerlink" title="导游系统景点类型查询功能"></a>导游系统景点类型查询功能</h3><p>功能分析：</p><ul><li>1个景点类型包含若干个景点</li><li>用户可以查询该景点类型包含哪几个景点</li><li>用户可以详细了解某一个景点的信息</li></ul><p>首先我们初始化景点类型数据结构，然后将各个景点进行类型分类，然后加入景点类型查询模块，后面嵌套一下景点信息查询模块。</p><p>部分代码展示：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define TN 5//类型数目值//景点类型数据结构typedef struct SpotType{string typeName;Spot S[TN];int number;}SpotType;//初始化景点类型数据结构void BuildingType(Spot spt[], SpotType stype[]){stype[0].typeName = "教学楼";stype[1].typeName = "学生宿舍";stype[2].typeName = "食堂";stype[3].typeName = "课外活动点";stype[0].S[0] = spt[2];stype[0].S[1] = spt[8];stype[0].S[2] = spt[10];stype[0].number = 3;stype[1].S[0] = spt[4];stype[1].S[1] = spt[6];stype[1].S[2] = spt[7];stype[1].number = 3;stype[2].S[0] = spt[3];stype[2].S[1] = spt[9];stype[2].number = 2;stype[3].S[0] = spt[1];stype[3].S[1] = spt[5];stype[3].S[2] = spt[12];stype[3].S[3] = spt[14];stype[3].number = 4;}//查询景点类型void ShowType(Spot spt[], SpotType stype[]){int select = 0;while (true){cout &lt;&lt; "                                                    |==============================|" &lt;&lt; endl;cout &lt;&lt; "                                                    |          1." &lt;&lt; stype[0].typeName &lt;&lt; "            |" &lt;&lt; endl;cout &lt;&lt; "                                                    |          2." &lt;&lt; stype[1].typeName &lt;&lt; "          |" &lt;&lt; endl;cout &lt;&lt; "                                                    |          3." &lt;&lt; stype[2].typeName &lt;&lt; "              |" &lt;&lt; endl;cout &lt;&lt; "                                                    |          4." &lt;&lt; stype[3].typeName &lt;&lt; "        |" &lt;&lt; endl;cout &lt;&lt; "                                                    |==============================|" &lt;&lt; endl;cout &lt;&lt; "请选择你需要您要了解的类型：";cin &gt;&gt; select;getchar();switch (select){case 1:Print_Type(stype[select - 1]);break;case 2:Print_Type(stype[select - 1]);break;case 3:Print_Type(stype[select - 1]);break;case 4:Print_Type(stype[select - 1]);break;default:cout &lt;&lt; "请输入有效选项！\n回车键继续..." &lt;&lt; endl;getchar();system("cls");drawMap();continue;}cout &lt;&lt; "\n您需要了解以上建筑信息吗？（输入1了解，输入0取消）：";int select2;int select3;while (true){cin &gt;&gt; select2;if (select2 == 1){while (true){cout &lt;&lt; "\n请输入你想要了解建筑的编号（输入0取消）：";cin &gt;&gt; select3;if (select == 1){if (select3 == 3 || select3 == 9 || select3 == 11){printInfo(spt, select3 - 1);}else if (select3 == 0){break;}else{cout &lt;&lt; "请输入正确的此类型建筑编号！" &lt;&lt; endl;}}else if (select == 2){if (select3 == 5 || select3 == 7 || select3 == 8){printInfo(spt, select3 - 1);}else if (select3 == 0){break;}else{cout &lt;&lt; "请输入正确的此类型建筑编号！" &lt;&lt; endl;}}if (select == 3){if (select3 == 4 || select3 == 10){printInfo(spt, select3 - 1);}else if (select3 == 0){break;}else{cout &lt;&lt; "请输入正确的此类型建筑编号！" &lt;&lt; endl;}}if (select == 4){if (select3 == 2 || select3 == 6 || select3 == 13 || select3 == 15){printInfo(spt, select3 - 1);}else if (select3 == 0){break;}else{cout &lt;&lt; "请输入正确的此类型建筑编号！" &lt;&lt; endl;}}}}else if (select2 == 0){break;}else{cout &lt;&lt; "请输入正确选项！" &lt;&lt; endl;break;}if (select3 == 0) break;}}} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次的校园导游系统是我的数据结构课程设计，希望这篇文章能够帮我记下Dijkstra算法的实际运用，今后遇到相应的算法也能够有解决思路。  </p><p>本次的导游系统介绍就到这了，有需要看源代码的朋友可以到我的 GitHub 仓库中查看。  </p><h2 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h2><p><a href="https://github.com/InvictusEd/Campus-tour-guide-system.git">校园导游系统</a></p><blockquote><p>本章一句：<br>当你因为错过太阳而哭泣的时候，你也要错过群星了。——泰戈尔《飞鸟集》</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;  本篇文章的目的是记录下我设计并实现《 C 校园导游系统》的过程，其实我本来想要把这个系统做的很好，但是奈何本学期出现了一些突发事件，导致</summary>
      
    
    
    
    <category term="C" scheme="http://invictusqiu.com/categories/C/"/>
    
    
    <category term="C" scheme="http://invictusqiu.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Unity游戏引擎-动画系统-骨骼动画</title>
    <link href="http://invictusqiu.com/2022/07/28/Unity-AnimationSystem-skeletal%20animation/"/>
    <id>http://invictusqiu.com/2022/07/28/Unity-AnimationSystem-skeletal%20animation/</id>
    <published>2022-07-28T02:34:18.000Z</published>
    <updated>2024-09-21T08:19:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="骨骼动画"><a href="#骨骼动画" class="headerlink" title="骨骼动画"></a>骨骼动画</h2><h3 id="骨骼动画的原理"><a href="#骨骼动画的原理" class="headerlink" title="骨骼动画的原理"></a>骨骼动画的原理</h3><p>游戏里最常用的动画是骨骼动画，骨骼动画的出现是因为传统的关键帧动画存在一些问题。  </p><h4 id="传统关键帧动画存在的问题："><a href="#传统关键帧动画存在的问题：" class="headerlink" title="传统关键帧动画存在的问题："></a>传统关键帧动画存在的问题：</h4><blockquote><p>需要保存更多的数据<br>和游戏环境交互较少<br>难于控制</p></blockquote><p>由于场景动画比较简单，如果场景里的物体也比较简单，使用关键帧方式保存不会出现大问题。<strong>但是游戏中出现的角色普遍是由很复杂的网格组成，网格顶点数量巨大，角色形变也比较大，保存的时候就需要大量数据，占据存储空间</strong>。  </p><p>并且游戏跟普通的三维动画、影片不一样，<strong>游戏中的角色需要和游戏中的环境发生交互</strong>，如果角色的网格点是一些离散的三角形顶点，不包含任何语义信息，也就无法和场景发生交互，比如用手抓起武器，都不知道手该用哪一个顶点表示，导致交互很困难。  </p><p>对于更进一步的<strong>运动编辑比较难</strong>，如果我们使用顶点保存关键帧信息，我们有一段走路、跑步运动，而我想得到快走这样一个中间动画，这就变得不现实，我们不能通过两种走路跑步的插值来融合得到。</p><h4 id="骨骼动画解决问题："><a href="#骨骼动画解决问题：" class="headerlink" title="骨骼动画解决问题："></a>骨骼动画解决问题：</h4><p>使用一个中间介质，<strong>中间介质就是骨架</strong>，而角色的真正外观，也就是三维网格，它是依附于骨架的，进行被动地运动，骨架是主动的变化，而外围我们所看到地网格是由于骨架的变化而被动地变化，所以骨骼动画也被称为<strong>隐式动画</strong>。  </p><p>在骨骼动画的播放阶段，由于骨架结构简单，只需要经过简单计算就可以得到骨架的姿态，进而利用网格顶点和骨架上每一骨骼的附属关系信息来计算出每个网格顶点的位置，从而得到最终我们能看见的网格的姿态，生成完整的动画，这种方式就是骨骼动画。 </p><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB01.jpg" alt="骨骼动画" title="骨骼动画">  </p><p><strong>骨骼动画的优势</strong>  </p><blockquote><p>骨架结构简单，可以高效保存动画的关键帧信息。  </p><p>骨架本身含有语义信息，可以通过骨架区分出身体的不同部位，从而进行更加灵活的控制，比如我们知道骨架上哪一个骨骼是手部骨骼、腿部骨骼、头部骨骼，从而可以通过控制这些骨骼，来跟周围的环境发生交互。  </p><p>得到一些实时计算的动画，这些动画没有事先保存。比如如何通过走路跟跑步融合得到快跑，这种情况只能使用骨骼动画的模式。</p></blockquote><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB02.png" alt="骨骼动画"><br>骨骼动画在播放时，如上图所示，它是分离的，<strong>骨架用来表示动画信息，周围的人物，我们看得见的网格，是依附于骨架的</strong>。由于人物、脊椎动物，天然是由骨架形成的，所以很适合用骨架来模拟。<strong>构成骨骼动画的完整部分，一部分是骨架，另一部分是跟骨架有映射关系的网格，也称为皮肤，通过控制骨架的运动，来控制相应皮肤的变形，形成角色动画，这就是骨骼动画的播放原理。</strong>  </p><h2 id="Unity骨骼动画基础实践"><a href="#Unity骨骼动画基础实践" class="headerlink" title="Unity骨骼动画基础实践"></a>Unity骨骼动画基础实践</h2><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><p>在Asset Store上面下载一个具有骨骼动画的模型包，在搜索栏里输入<strong>Unity-Chan</strong>并下载<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB03.png" alt="Asset Store">  </p><p>然后将下载好的资源包导入到Unity项目工程里面<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB04.png" alt="导入资源包">  </p><h3 id="实施阶段"><a href="#实施阶段" class="headerlink" title="实施阶段"></a>实施阶段</h3><p>一、将模型拖入到场景视图下面<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB05.png" alt="拖入模型">  </p><p>二、通过Animator Controller来对骨骼动画模型进行动画状态的控制<br><strong>在 Project 视图下 Creat 一个 Animator Controller</strong> 起名为 <strong>Girl</strong>。然后把 <strong>Girl</strong> 拖拽到模型的 Animator Controller 属性里面<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB06.png" alt="创建Animator Controller">  </p><p>三、双击 Girl 打开这个角色动画的动画状态机界面，可以在里面添加状态，对动画状态进行转换。在 Project 视图下面找到一个动画片段。这里我找到一个等待的的状态，将它拖拽到 Animator Controller窗口底下，橙色为默认播放的动画状态。点击播放角色开始进行闲置动画。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB07.png" alt="动画状态机"></p><h3 id="脚本控制"><a href="#脚本控制" class="headerlink" title="脚本控制"></a>脚本控制</h3><p><strong>目标是实现：当用户键盘按下空格键，可以由一个动画状态转换为另外一个动画状态。</strong>  </p><p>一、找到另外一个动画状态，拖拽到状态机窗口里面，然后通过建立一个 Transition,把默认动画转换给新的动画片段，添加一个 Trigger 类型（触发器类型）的控制参数，起名为 next，然后点击转换箭头，在转换条件那里把条件设置为 next，当这个参数触发时才发生转换。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB08.png" alt="添加控制参数和转换条件">  </p><p>二、那要怎么发生呢，那就用脚本控制，Creat 一个脚本取名为 AnimaControl，打开脚本编辑</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class AnimaControl : MonoBehaviour{    private Animator anim;      //建立成员变量保存模型的Animator组件    // Start is called before the first frame update    void Start()    {        anim = GetComponent&lt;Animator&gt;();    //得到当前游戏物体的Animator组件    }    // Update is called once per frame    void Update()    {        if(Input.GetKeyDown(KeyCode.Space))     //当用户按下空格键        {            anim.SetTrigger("next");            //Trigger设置为next        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存后将编辑好的脚本拖拽到模型上面，按下空格转换就发生了，此时的转换是需要等待上一个动画结束后才转换的，如果不想等待，就取消掉 Has Exit Time 选项就可以了。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB09.png" alt="动画转换"></p><h3 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h3><p>Event的意思是，当这个动画片段播放到某一帧时，可以为它添加一个响应事件，<strong>而这个事件对应着脚本里的某个函数</strong>。所以在脚本里面可以写一个 public 类型的函数，取名为WaitFinish，我们来做一个实验。</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public void WaitFinish()    {        Debug.Log("WaitFinish");       //在控制台输出函数被调用时输出的一句话    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>找到动画片段的初始文件，在初始文件属性里面有一个 Event，拖拽时间轴，把动画片段定位为某一帧，这时候可以添加一个响应事件，事件名字为函数名字，然后 Apply 保存。这意味着这个动画片段无论被应用于哪一个Animator Controller当中，当它播放到那一帧时，都会触发这个函数。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB10.png" alt="响应事件"></p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>骨骼动画最重要的好处是<strong>可以实现动画数据的重利用</strong>，因为角色的动画只是保存在骨架的结构上，而骨架具有很简单的拓扑结构，如果是同样类型的生物，那么他的骨架很可能是相同的，比如人形，它内部的骨架是一样的，由于最终产生动画的是骨架的变化，所以我们有可能对一个骨架的动画，来驱动不同角色进行相同的运动，这种叫做动画重定向。</p><h4 id="动画的重定向"><a href="#动画的重定向" class="headerlink" title="动画的重定向"></a>动画的重定向</h4><p>如果我想使用别的三维模型的动画，由于骨骼动画的支持，使得过程很便利。<br>我们去Asset Store搜索下载Standard Assets资源，它有一个第三人称控制器，里面已经包含了很多动画片段，有一个很完整的Animator Controller，来控制这些动画片段之间的过渡。  </p><p>我们将第三人称的Animator Controller拖拽给模型，这时候播放就会发现她的idle状态已经变为第三人称控制器的idle状态了。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB11.png" alt="第三人称Animator Controller"></p><p>然后我们又找到第三人称控制的脚本，拖拽给模型。由于这个脚本里面使用了RequireComponent，所以我们不光添加了这个脚本，还添加了这个脚本所要求的组件在模型身上，我们调整一下碰撞体大小，使得符合模型的大小。我们运行游戏的话，就会发现ASWD鼠标可以对unity-chan进行控制了。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB12.png" alt="第三人称控制脚本"></p><h4 id="动画状态之间的融合"><a href="#动画状态之间的融合" class="headerlink" title="动画状态之间的融合"></a>动画状态之间的融合</h4><p>我们打开unity-chan现在所挂接的Animator Controller，发现它有比较复杂的动画状态以及动画状态之间的转换。我们来看其中一个转换，这个转换是角色跳起后落地到站立的过程，她有一个过渡的过程，这个过程显得角色很自然，我们可以把这个过程拉长，这个过程就会变得很缓慢，但过程仍然很自然。当我们将其调回到原来的融合间距，这个过程会变得更加迅速和自然。<br><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB13.png" alt="动画状态之间的融合"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>骨骼动画是用骨骼来保存动画信息，而我们看得见的三维网格，则是依附于骨骼进行被动地运动，这个就是骨骼动画的原理。因为我们保存的骨骼，是跟外貌无关的骨架它的运动，因此，一个骨骼动画，就有可能用来驱动多个不同的角色，这种技术被称为运动的重定向。</p><blockquote><p>本章一句：<br>这朵世间最美好的玫瑰，星尘为泥，银河滋养。永远不会枯萎，永远在沉静宇宙中盛放。 这是我要给你的，宇宙级别的浪漫。</p></blockquote><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/illust_90738662_20220530_202311.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;骨骼动画&quot;&gt;&lt;a href=&quot;#骨骼动画&quot; class=&quot;headerlink&quot; title=&quot;骨骼动画&quot;&gt;&lt;/a&gt;骨骼动画&lt;/h2&gt;&lt;h3 id=&quot;骨骼动画的原理&quot;&gt;&lt;a href=&quot;#骨骼动画的原理&quot; class=&quot;headerlink&quot; title=&quot;骨骼动</summary>
      
    
    
    
    <category term="Unity" scheme="http://invictusqiu.com/categories/Unity/"/>
    
    
    <category term="Unity" scheme="http://invictusqiu.com/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基本语法详细介绍</title>
    <link href="http://invictusqiu.com/2022/02/05/MarkdownSyntax/"/>
    <id>http://invictusqiu.com/2022/02/05/MarkdownSyntax/</id>
    <published>2022-02-05T03:00:12.000Z</published>
    <updated>2024-09-21T08:19:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML或者HTML文档。</p><h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><p>在想要设置为标题的文字前加#来表示。  </p><p>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。  </p><p>注：标准语法要在#后面跟一个空格再写文字。</p><p>示例：</p><pre class="line-numbers language-none"><code class="language-none"># 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：  </p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><ul><li><p><strong>加粗</strong>  </p><p>要加粗的文字左右分别用两个*号包起来  </p></li><li><p><strong>斜体</strong></p><p>要倾斜的文字左右分别用一个*号包起来  </p></li><li><p><strong>斜体加粗</strong>  </p><p>要倾斜和加粗的文字左右分别用三个*号包起来  </p></li><li><p><strong>删除线</strong>  </p><p>要加删除线的文字左右分别用两个~~号包起来  </p></li></ul><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">**这是加粗的文字***这是倾斜的文字****这是倾斜加粗的文字***~~这是加删除线的文字~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><em><strong>这是倾斜加粗的文字</strong></em><br><del>这是加删除线的文字</del></p><h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>在引用的文字前加&gt;即可。引用可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…  </p><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><blockquote><p>这是引用的内容</p></blockquote><h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p>三个或者三个以上的-或者*都可以。  </p><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">-------********<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：<br>可以看到，显示效果是一样的。</p><hr><hr><hr><hr><h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">![图片alt](图片地址"图片title")图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">![岩田聪](https://invictusqiu.oss-cn-beijing.aliyuncs.com/yantiancong.jpg "岩田聪")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果如下：  </p><p><img src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/yantiancong.jpg" alt="岩田聪" title="岩田聪"></p><p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong>  </p><p>markdown格式追求的是简单、多平台统一。这里我用到的是基于阿里云OSS个人搭建的图床。</p><h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">[超链接名](超链接地址 "超链接title")title可加可不加<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">[我的github主页](https://github.com/InvictusEd)[我的个人博客网站](https://invictusqiu.com/)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>效果如下：  </p><p><a href="https://github.com/InvictusEd">我的github主页</a><br><a href="https://invictusqiu.com/">我的个人博客网站</a></p><h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><p><strong>无序列表</strong>  </p><p>语法：<br>无序列表用-+*任何一种都可以</p><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下:  </p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><p><strong>有序列表</strong>  </p><p>语法：<br>数字加点</p><pre class="line-numbers language-none"><code class="language-none">1. 列表内容2. 列表内容3. 列表内容注意：序号跟内容之间要有空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容  </li></ol><p><strong>列表嵌套</strong>  </p><p><strong>上一级和下一级之间敲三个空格即可</strong></p><ul><li><p>一级无序列表内容</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li><p>一级无序列表内容</p><ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><ol><li><p>一级有序列表内容</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li><p>一级有序列表内容</p><ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ol><h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">|表头|表头|表头||---|:--:|---:||内容|内容|内容||内容|内容|内容|第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左- 两边加:表示文字居中- 右边加:表示文字居右<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">|姓名|技能|排行||---|:--:|---:||刘备|哭|大哥||关羽|打|二哥||张飞|骂|三弟|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：  </p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><blockquote><p>因网站主题限制，表格文字暂且只能靠左对齐。</p></blockquote><h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><p>语法：<br>单行代码：代码之间分别用一个反引号包起来</p><pre class="line-numbers language-none"><code class="language-none">`代码内容`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><pre class="line-numbers language-none"><code class="language-none">(```)    代码...    代码...    代码...(```)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p></blockquote><p>示例：  </p><p>单行代码</p><pre class="line-numbers language-none"><code class="language-none">`create database hero`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码块</p><pre class="line-numbers language-none"><code class="language-none">(```)    function fun(){        echo "这是一句非常牛逼的代码";    }    fun();(```)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：  </p><p>单行代码<br><code>create database hero</code></p><p>代码块</p><pre class="line-numbers language-none"><code class="language-none">function fun(){    echo "这是一句非常牛逼的代码";}fun();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>本文章参考<br>简书：<a href="https://www.jianshu.com/p/191d1e21f7ed/">高鸿祥《Markdown基本语法》</a></strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML或者HTML文档。&lt;/p&gt;
&lt;h1 id=&quot;一、标题&quot;&gt;&lt;a href=&quot;#一、标题&quot; class=&quot;headerlink&quot; title=&quot;一、</summary>
      
    
    
    
    <category term="Makrdown" scheme="http://invictusqiu.com/categories/Makrdown/"/>
    
    
    <category term="Markdown" scheme="http://invictusqiu.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
